;
;
var Zone = (function (global) {
    var Zone = (function () {
        function Zone(parent, zoneSpec) {
            this._properties = null;
            this._parent = parent;
            this._name = zoneSpec ? zoneSpec.name || 'unnamed' : '<root>';
            this._properties = zoneSpec && zoneSpec.properties || {};
            this._zoneDelegate = new ZoneDelegate(this, this._parent && this._parent._zoneDelegate, zoneSpec);
        }
        Object.defineProperty(Zone, "current", {
            get: function () { return _currentZone; },
            enumerable: true,
            configurable: true
        });
        ;
        Object.defineProperty(Zone, "currentTask", {
            get: function () { return _currentTask; },
            enumerable: true,
            configurable: true
        });
        ;
        Object.defineProperty(Zone.prototype, "parent", {
            get: function () { return this._parent; },
            enumerable: true,
            configurable: true
        });
        ;
        Object.defineProperty(Zone.prototype, "name", {
            get: function () { return this._name; },
            enumerable: true,
            configurable: true
        });
        ;
        Zone.prototype.get = function (key) {
            var current = this;
            while (current) {
                if (current._properties.hasOwnProperty(key)) {
                    return current._properties[key];
                }
                current = current._parent;
            }
        };
        Zone.prototype.fork = function (zoneSpec) {
            if (!zoneSpec)
                throw new Error('ZoneSpec required!');
            return this._zoneDelegate.fork(this, zoneSpec);
        };
        Zone.prototype.wrap = function (callback, source) {
            if (typeof callback != 'function') {
                throw new Error('Expecting function got: ' + callback);
            }
            var callback = this._zoneDelegate.intercept(this, callback, source);
            var zone = this;
            return function () {
                return zone.runGuarded(callback, this, arguments, source);
            };
        };
        Zone.prototype.run = function (callback, applyThis, applyArgs, source) {
            if (applyThis === void 0) { applyThis = null; }
            if (applyArgs === void 0) { applyArgs = null; }
            if (source === void 0) { source = null; }
            var oldZone = _currentZone;
            _currentZone = this;
            try {
                return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);
            }
            finally {
                _currentZone = oldZone;
            }
        };
        Zone.prototype.runGuarded = function (callback, applyThis, applyArgs, source) {
            if (applyThis === void 0) { applyThis = null; }
            if (applyArgs === void 0) { applyArgs = null; }
            if (source === void 0) { source = null; }
            var oldZone = _currentZone;
            _currentZone = this;
            try {
                try {
                    return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);
                }
                catch (error) {
                    if (this._zoneDelegate.handleError(this, error)) {
                        throw error;
                    }
                }
            }
            finally {
                _currentZone = oldZone;
            }
        };
        Zone.prototype.runTask = function (task, applyThis, applyArgs) {
            if (task.zone != this)
                throw new Error('A task can only be run in the zone which created it! (Creation: ' +
                    task.zone.name + '; Execution: ' + this.name + ')');
            var previousTask = _currentTask;
            _currentTask = task;
            var oldZone = _currentZone;
            _currentZone = this;
            try {
                try {
                    return this._zoneDelegate.invokeTask(this, task, applyThis, applyArgs);
                }
                catch (error) {
                    if (this._zoneDelegate.handleError(this, error)) {
                        throw error;
                    }
                }
            }
            finally {
                if (task.type == 'macroTask' && task.data && !task.data.isPeriodic) {
                    task.cancelFn = null;
                }
                _currentZone = oldZone;
                _currentTask = previousTask;
            }
        };
        Zone.prototype.scheduleMicroTask = function (source, callback, data, customSchedule) {
            return this._zoneDelegate.scheduleTask(this, new ZoneTask('microTask', this, source, callback, data, customSchedule, null));
        };
        Zone.prototype.scheduleMacroTask = function (source, callback, data, customSchedule, customCancel) {
            return this._zoneDelegate.scheduleTask(this, new ZoneTask('macroTask', this, source, callback, data, customSchedule, customCancel));
        };
        Zone.prototype.scheduleEventTask = function (source, callback, data, customSchedule, customCancel) {
            return this._zoneDelegate.scheduleTask(this, new ZoneTask('eventTask', this, source, callback, data, customSchedule, customCancel));
        };
        Zone.prototype.cancelTask = function (task) {
            var value = this._zoneDelegate.cancelTask(this, task);
            task.cancelFn = null;
            return value;
        };
        Zone.__symbol__ = __symbol__;
        return Zone;
    }());
    ;
    var ZoneDelegate = (function () {
        function ZoneDelegate(zone, parentDelegate, zoneSpec) {
            this._taskCounts = { microTask: 0, macroTask: 0, eventTask: 0 };
            this.zone = zone;
            this._parentDelegate = parentDelegate;
            this._forkZS = zoneSpec && (zoneSpec && zoneSpec.onFork ? zoneSpec : parentDelegate._forkZS);
            this._forkDlgt = zoneSpec && (zoneSpec.onFork ? parentDelegate : parentDelegate._forkDlgt);
            this._interceptZS = zoneSpec && (zoneSpec.onIntercept ? zoneSpec : parentDelegate._interceptZS);
            this._interceptDlgt = zoneSpec && (zoneSpec.onIntercept ? parentDelegate : parentDelegate._interceptDlgt);
            this._invokeZS = zoneSpec && (zoneSpec.onInvoke ? zoneSpec : parentDelegate._invokeZS);
            this._invokeDlgt = zoneSpec && (zoneSpec.onInvoke ? parentDelegate : parentDelegate._invokeDlgt);
            this._handleErrorZS = zoneSpec && (zoneSpec.onHandleError ? zoneSpec : parentDelegate._handleErrorZS);
            this._handleErrorDlgt = zoneSpec && (zoneSpec.onHandleError ? parentDelegate : parentDelegate._handleErrorDlgt);
            this._scheduleTaskZS = zoneSpec && (zoneSpec.onScheduleTask ? zoneSpec : parentDelegate._scheduleTaskZS);
            this._scheduleTaskDlgt = zoneSpec && (zoneSpec.onScheduleTask ? parentDelegate : parentDelegate._scheduleTaskDlgt);
            this._invokeTaskZS = zoneSpec && (zoneSpec.onInvokeTask ? zoneSpec : parentDelegate._invokeTaskZS);
            this._invokeTaskDlgt = zoneSpec && (zoneSpec.onInvokeTask ? parentDelegate : parentDelegate._invokeTaskDlgt);
            this._cancelTaskZS = zoneSpec && (zoneSpec.onCancelTask ? zoneSpec : parentDelegate._cancelTaskZS);
            this._cancelTaskDlgt = zoneSpec && (zoneSpec.onCancelTask ? parentDelegate : parentDelegate._cancelTaskDlgt);
            this._hasTaskZS = zoneSpec && (zoneSpec.onHasTask ? zoneSpec : parentDelegate._hasTaskZS);
            this._hasTaskDlgt = zoneSpec && (zoneSpec.onHasTask ? parentDelegate : parentDelegate._hasTaskDlgt);
        }
        ZoneDelegate.prototype.fork = function (targetZone, zoneSpec) {
            return this._forkZS
                ? this._forkZS.onFork(this._forkDlgt, this.zone, targetZone, zoneSpec)
                : new Zone(targetZone, zoneSpec);
        };
        ZoneDelegate.prototype.intercept = function (targetZone, callback, source) {
            return this._interceptZS
                ? this._interceptZS.onIntercept(this._interceptDlgt, this.zone, targetZone, callback, source)
                : callback;
        };
        ZoneDelegate.prototype.invoke = function (targetZone, callback, applyThis, applyArgs, source) {
            return this._invokeZS
                ? this._invokeZS.onInvoke(this._invokeDlgt, this.zone, targetZone, callback, applyThis, applyArgs, source)
                : callback.apply(applyThis, applyArgs);
        };
        ZoneDelegate.prototype.handleError = function (targetZone, error) {
            return this._handleErrorZS
                ? this._handleErrorZS.onHandleError(this._handleErrorDlgt, this.zone, targetZone, error)
                : true;
        };
        ZoneDelegate.prototype.scheduleTask = function (targetZone, task) {
            try {
                if (this._scheduleTaskZS) {
                    return this._scheduleTaskZS.onScheduleTask(this._scheduleTaskDlgt, this.zone, targetZone, task);
                }
                else if (task.scheduleFn) {
                    task.scheduleFn(task);
                }
                else if (task.type == 'microTask') {
                    scheduleMicroTask(task);
                }
                else {
                    throw new Error('Task is missing scheduleFn.');
                }
                return task;
            }
            finally {
                if (targetZone == this.zone) {
                    this._updateTaskCount(task.type, 1);
                }
            }
        };
        ZoneDelegate.prototype.invokeTask = function (targetZone, task, applyThis, applyArgs) {
            try {
                return this._invokeTaskZS
                    ? this._invokeTaskZS.onInvokeTask(this._invokeTaskDlgt, this.zone, targetZone, task, applyThis, applyArgs)
                    : task.callback.apply(applyThis, applyArgs);
            }
            finally {
                if (targetZone == this.zone && (task.type != 'eventTask') && !(task.data && task.data.isPeriodic)) {
                    this._updateTaskCount(task.type, -1);
                }
            }
        };
        ZoneDelegate.prototype.cancelTask = function (targetZone, task) {
            var value;
            if (this._cancelTaskZS) {
                value = this._cancelTaskZS.onCancelTask(this._cancelTaskDlgt, this.zone, targetZone, task);
            }
            else if (!task.cancelFn) {
                throw new Error('Task does not support cancellation, or is already canceled.');
            }
            else {
                value = task.cancelFn(task);
            }
            if (targetZone == this.zone) {
                // this should not be in the finally block, because exceptions assume not canceled.
                this._updateTaskCount(task.type, -1);
            }
            return value;
        };
        ZoneDelegate.prototype.hasTask = function (targetZone, isEmpty) {
            return this._hasTaskZS && this._hasTaskZS.onHasTask(this._hasTaskDlgt, this.zone, targetZone, isEmpty);
        };
        ZoneDelegate.prototype._updateTaskCount = function (type, count) {
            var counts = this._taskCounts;
            var prev = counts[type];
            var next = counts[type] = prev + count;
            if (next < 0) {
                throw new Error('More tasks executed then were scheduled.');
            }
            if (prev == 0 || next == 0) {
                var isEmpty = {
                    microTask: counts.microTask > 0,
                    macroTask: counts.macroTask > 0,
                    eventTask: counts.eventTask > 0,
                    change: type
                };
                try {
                    this.hasTask(this.zone, isEmpty);
                }
                finally {
                    if (this._parentDelegate) {
                        this._parentDelegate._updateTaskCount(type, count);
                    }
                }
            }
        };
        return ZoneDelegate;
    }());
    var ZoneTask = (function () {
        function ZoneTask(type, zone, source, callback, options, scheduleFn, cancelFn) {
            this.type = type;
            this.zone = zone;
            this.source = source;
            this.data = options;
            this.scheduleFn = scheduleFn;
            this.cancelFn = cancelFn;
            this.callback = callback;
            var self = this;
            this.invoke = function () {
                try {
                    return zone.runTask(self, this, arguments);
                }
                finally {
                    drainMicroTaskQueue();
                }
            };
        }
        return ZoneTask;
    }());
    function __symbol__(name) { return '__zone_symbol__' + name; }
    ;
    var symbolSetTimeout = __symbol__('setTimeout');
    var symbolPromise = __symbol__('Promise');
    var symbolThen = __symbol__('then');
    var _currentZone = new Zone(null, null);
    var _currentTask = null;
    var _microTaskQueue = [];
    var _isDrainingMicrotaskQueue = false;
    var _uncaughtPromiseErrors = [];
    var _drainScheduled = false;
    function scheduleQueueDrain() {
        if (!_drainScheduled && !_currentTask && _microTaskQueue.length == 0) {
            // We are not running in Task, so we need to kickstart the microtask queue.
            if (global[symbolPromise]) {
                global[symbolPromise].resolve(0)[symbolThen](drainMicroTaskQueue);
            }
            else {
                global[symbolSetTimeout](drainMicroTaskQueue, 0);
            }
        }
    }
    function scheduleMicroTask(task) {
        scheduleQueueDrain();
        _microTaskQueue.push(task);
    }
    function consoleError(e) {
        var rejection = e && e.rejection;
        if (rejection) {
            console.error('Unhandled Promise rejection:', rejection instanceof Error ? rejection.message : rejection, '; Zone:', e.zone.name, '; Task:', e.task && e.task.source, '; Value:', rejection);
        }
        console.error(e);
    }
    function drainMicroTaskQueue() {
        if (!_isDrainingMicrotaskQueue) {
            _isDrainingMicrotaskQueue = true;
            while (_microTaskQueue.length) {
                var queue = _microTaskQueue;
                _microTaskQueue = [];
                for (var i = 0; i < queue.length; i++) {
                    var task = queue[i];
                    try {
                        task.zone.runTask(task, null, null);
                    }
                    catch (e) {
                        consoleError(e);
                    }
                }
            }
            while (_uncaughtPromiseErrors.length) {
                var uncaughtPromiseErrors = _uncaughtPromiseErrors;
                _uncaughtPromiseErrors = [];
                for (var i = 0; i < uncaughtPromiseErrors.length; i++) {
                    var uncaughtPromiseError = uncaughtPromiseErrors[i];
                    try {
                        uncaughtPromiseError.zone.runGuarded(function () { throw uncaughtPromiseError; });
                    }
                    catch (e) {
                        consoleError(e);
                    }
                }
            }
            _isDrainingMicrotaskQueue = false;
            _drainScheduled = false;
        }
    }
    function isThenable(value) {
        return value && value.then;
    }
    function forwardResolution(value) { return value; }
    function forwardRejection(rejection) { return ZoneAwarePromise.reject(rejection); }
    var symbolState = __symbol__('state');
    var symbolValue = __symbol__('value');
    var source = 'Promise.then';
    var UNRESOLVED = null;
    var RESOLVED = true;
    var REJECTED = false;
    var REJECTED_NO_CATCH = 0;
    function makeResolver(promise, state) {
        return function (v) {
            resolvePromise(promise, state, v);
            // Do not return value or you will break the Promise spec.
        };
    }
    function resolvePromise(promise, state, value) {
        if (promise[symbolState] === UNRESOLVED) {
            if (value instanceof ZoneAwarePromise && value[symbolState] !== UNRESOLVED) {
                clearRejectedNoCatch(value);
                resolvePromise(promise, value[symbolState], value[symbolValue]);
            }
            else if (isThenable(value)) {
                value.then(makeResolver(promise, state), makeResolver(promise, false));
            }
            else {
                promise[symbolState] = state;
                var queue = promise[symbolValue];
                promise[symbolValue] = value;
                for (var i = 0; i < queue.length;) {
                    scheduleResolveOrReject(promise, queue[i++], queue[i++], queue[i++], queue[i++]);
                }
                if (queue.length == 0 && state == REJECTED) {
                    promise[symbolState] = REJECTED_NO_CATCH;
                    try {
                        throw new Error("Uncaught (in promise): " + value);
                    }
                    catch (e) {
                        var error = e;
                        error.rejection = value;
                        error.promise = promise;
                        error.zone = Zone.current;
                        error.task = Zone.currentTask;
                        _uncaughtPromiseErrors.push(error);
                        scheduleQueueDrain();
                    }
                }
            }
        }
        // Resolving an already resolved promise is a noop.
        return promise;
    }
    function clearRejectedNoCatch(promise) {
        if (promise[symbolState] === REJECTED_NO_CATCH) {
            promise[symbolState] = REJECTED;
            for (var i = 0; i < _uncaughtPromiseErrors.length; i++) {
                if (promise === _uncaughtPromiseErrors[i].promise) {
                    _uncaughtPromiseErrors.splice(i, 1);
                    break;
                }
            }
        }
    }
    function scheduleResolveOrReject(promise, zone, chainPromise, onFulfilled, onRejected) {
        clearRejectedNoCatch(promise);
        var delegate = promise[symbolState] ? onFulfilled || forwardResolution : onRejected || forwardRejection;
        zone.scheduleMicroTask(source, function () {
            try {
                resolvePromise(chainPromise, true, zone.run(delegate, null, [promise[symbolValue]]));
            }
            catch (error) {
                resolvePromise(chainPromise, false, error);
            }
        });
    }
    var ZoneAwarePromise = (function () {
        function ZoneAwarePromise(executor) {
            var promise = this;
            promise[symbolState] = UNRESOLVED;
            promise[symbolValue] = []; // queue;
            try {
                executor && executor(makeResolver(promise, RESOLVED), makeResolver(promise, REJECTED));
            }
            catch (e) {
                resolvePromise(promise, false, e);
            }
        }
        ZoneAwarePromise.resolve = function (value) {
            return resolvePromise(new this(null), RESOLVED, value);
        };
        ZoneAwarePromise.reject = function (error) {
            return resolvePromise(new this(null), REJECTED, error);
        };
        ZoneAwarePromise.race = function (values) {
            var resolve;
            var reject;
            var promise = new this(function (res, rej) { resolve = res; reject = rej; });
            function onResolve(value) { promise && (promise = null || resolve(value)); }
            function onReject(error) { promise && (promise = null || reject(error)); }
            for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {
                var value = values_1[_i];
                if (!isThenable(value)) {
                    value = this.resolve(value);
                }
                value.then(onResolve, onReject);
            }
            return promise;
        };
        ZoneAwarePromise.all = function (values) {
            var resolve;
            var reject;
            var promise = new this(function (res, rej) { resolve = res; reject = rej; });
            var resolvedValues = [];
            var count = 0;
            function onReject(error) { promise && reject(error); promise = null; }
            for (var _i = 0, values_2 = values; _i < values_2.length; _i++) {
                var value = values_2[_i];
                if (!isThenable(value)) {
                    value = this.resolve(value);
                }
                value.then((function (index) { return function (value) {
                    resolvedValues[index] = value;
                    count--;
                    if (promise && !count) {
                        resolve(resolvedValues);
                    }
                    promise == null;
                }; })(count), onReject);
                count++;
            }
            if (!count)
                resolve(resolvedValues);
            return promise;
        };
        ZoneAwarePromise.prototype.then = function (onFulfilled, onRejected) {
            var chainPromise = new ZoneAwarePromise(null);
            var zone = Zone.current;
            if (this[symbolState] == UNRESOLVED) {
                this[symbolValue].push(zone, chainPromise, onFulfilled, onRejected);
            }
            else {
                scheduleResolveOrReject(this, zone, chainPromise, onFulfilled, onRejected);
            }
            return chainPromise;
        };
        ZoneAwarePromise.prototype.catch = function (onRejected) {
            return this.then(null, onRejected);
        };
        return ZoneAwarePromise;
    }());
    var NativePromise = global[__symbol__('Promise')] = global.Promise;
    global.Promise = ZoneAwarePromise;
    if (NativePromise) {
        var NativePromiseProtototype = NativePromise.prototype;
        var NativePromiseThen = NativePromiseProtototype[__symbol__('then')]
            = NativePromiseProtototype.then;
        NativePromiseProtototype.then = function (onResolve, onReject) {
            var nativePromise = this;
            return new ZoneAwarePromise(function (resolve, reject) {
                NativePromiseThen.call(nativePromise, resolve, reject);
            }).then(onResolve, onReject);
        };
    }
    return global.Zone = Zone;
})(typeof window == 'undefined' ? global : window);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInB1YmxpYy9ub2RlX21vZHVsZXMvem9uZS5qcy9saWIvem9uZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF3VUMsQ0FBQztBQXVEOEUsQ0FBQztBQW9HakYsSUFBSSxJQUFJLEdBQWEsQ0FBQyxVQUFTLE1BQU07SUFDbkM7UUFnQkUsY0FBWSxNQUFZLEVBQUUsUUFBa0I7WUFIcEMsZ0JBQVcsR0FBeUIsSUFBSSxDQUFDO1lBSy9DLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO1lBQ3RCLElBQUksQ0FBQyxLQUFLLEdBQUcsUUFBUSxHQUFHLFFBQVEsQ0FBQyxJQUFJLElBQUksU0FBUyxHQUFHLFFBQVEsQ0FBQztZQUM5RCxJQUFJLENBQUMsV0FBVyxHQUFHLFFBQVEsSUFBSSxRQUFRLENBQUMsVUFBVSxJQUFJLEVBQUUsQ0FBQztZQUN6RCxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksWUFBWSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQ3BHLENBQUM7UUFsQkQsc0JBQVcsZUFBTztpQkFBbEIsY0FBb0MsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7OztXQUFBOztRQUMxRCxzQkFBVyxtQkFBVztpQkFBdEIsY0FBaUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7OztXQUFBOztRQUV2RCxzQkFBVyx3QkFBTTtpQkFBakIsY0FBbUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDOzs7V0FBQTs7UUFDekQsc0JBQVcsc0JBQUk7aUJBQWYsY0FBNEIsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDOzs7V0FBQTs7UUFnQnpDLGtCQUFHLEdBQVYsVUFBVyxHQUFXO1lBQ3BCLElBQUksT0FBTyxHQUFTLElBQUksQ0FBQztZQUN6QixPQUFPLE9BQU8sRUFBRSxDQUFDO2dCQUNm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QUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQ3JDLENBQUM7UUFDSCx1QkFBQztJQUFELENBL0VBLEFBK0VDLElBQUE7SUFFRCxJQUFJLGFBQWEsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQztJQUNuRSxNQUFNLENBQUMsT0FBTyxHQUFHLGdCQUFnQixDQUFDO0lBQ2xDLEVBQUUsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7UUFDbEIsSUFBSSx3QkFBd0IsR0FBRyxhQUFhLENBQUMsU0FBUyxDQUFDO1FBQ3ZELElBQUksaUJBQWlCLEdBQUcsd0JBQXdCLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2NBQzlELHdCQUF3QixDQUFDLElBQUksQ0FBQztRQUNwQyx3QkFBd0IsQ0FBQyxJQUFJLEdBQUcsVUFBUyxTQUFTLEVBQUUsUUFBUTtZQUMxRCxJQUFJLGFBQWEsR0FBRyxJQUFJLENBQUM7WUFDekIsTUFBTSxDQUFDLElBQUksZ0JBQWdCLENBQUMsVUFBQyxPQUFPLEVBQUUsTUFBTTtnQkFDMUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDekQsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUMvQixDQUFDLENBQUE7SUFDSCxDQUFDO0lBRUQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0FBQzVCLENBQUMsQ0FBQyxDQUFDLE9BQU8sTUFBTSxJQUFJLFdBQVcsR0FBRyxNQUFNLEdBQUcsTUFBTSxDQUFDLENBQUMiLCJmaWxlIjoicHVibGljL25vZGVfbW9kdWxlcy96b25lLmpzL2xpYi96b25lLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBab25lIGlzIGEgbWVjaGFuaXNtIGZvciBpbnRlcmNlcHRpbmcgYW5kIGtlZXBpbmcgdHJhY2sgb2YgYXN5bmNocm9ub3VzIHdvcmsuXG4gKlxuICogQSBab25lIGlzIGEgZ2xvYmFsIG9iamVjdCB3aGljaCBpcyBjb25maWd1cmVkIHdpdGggcnVsZXMgYWJvdXQgaG93IHRvIGludGVyY2VwdCBhbmQga2VlcCB0cmFja1xuICogb2YgdGhlIGFzeW5jaHJvbm91cyBjYWxsYmFja3MuIFpvbmUgaGFzIHRoZXNlIHJlc3BvbnNpYmlsaXRpZXM6XG4gKlxuICogMS4gSW50ZXJjZXB0IGFzeW5jaHJvbm91cyB0YXNrIHNjaGVkdWxpbmdcbiAqIDIuIFdyYXAgY2FsbGJhY2tzIGZvciBlcnJvci1oYW5kbGluZyBhbmQgem9uZSB0cmFja2luZyBhY3Jvc3MgYXN5bmMgb3BlcmF0aW9ucy5cbiAqIDMuIFByb3ZpZGUgYSB3YXkgdG8gYXR0YWNoIGRhdGEgdG8gem9uZXNcbiAqIDQuIFByb3ZpZGUgYSBjb250ZXh0IHNwZWNpZmljIGxhc3QgZnJhbWUgZXJyb3IgaGFuZGxpbmdcbiAqIDUuIChJbnRlcmNlcHQgYmxvY2tpbmcgbWV0aG9kcylcbiAqXG4gKiBBIHpvbmUgYnkgaXRzZWxmIGRvZXMgbm90IGRvIGFueXRoaW5nLCBpbnN0ZWFkIGl0IHJlbGllcyBvbiBzb21lIG90aGVyIGNvZGUgdG8gcm91dGUgZXhpc3RpbmdcbiAqIHBsYXRmb3JtIEFQSSB0aHJvdWdoIGl0LiAoVGhlIHpvbmUgbGlicmFyeSBzaGlwcyB3aXRoIGNvZGUgd2hpY2ggbW9ua2V5IHBhdGNoZXMgYWxsIG9mIHRoZVxuICogYnJvd3NlcnMncyBhc3luY2hyb25vdXMgQVBJIGFuZCByZWRpcmVjdHMgdGhlbSB0aHJvdWdoIHRoZSB6b25lIGZvciBpbnRlcmNlcHRpb24uKVxuICpcbiAqIEluIGl0cyBzaW1wbGVzdCBmb3JtIGEgem9uZSBhbGxvd3Mgb25lIHRvIGludGVyY2VwdCB0aGUgc2NoZWR1bGluZyBhbmQgY2FsbGluZyBvZiBhc3luY2hyb25vdXNcbiAqIG9wZXJhdGlvbnMsIGFuZCBleGVjdXRlIGFkZGl0aW9uYWwgY29kZSBiZWZvcmUgYXMgd2VsbCBhcyBhZnRlciB0aGUgYXN5bmNocm9ub3VzIHRhc2suIFRoZSBydWxlc1xuICogb2YgaW50ZXJjZXB0aW9uIGFyZSBjb25maWd1cmVkIHVzaW5nIFtab25lQ29uZmlnXS4gVGhlcmUgY2FuIGJlIG1hbnkgZGlmZmVyZW50IHpvbmUgaW5zdGFuY2VzIGluXG4gKiBhIHN5c3RlbSwgYnV0IG9ubHkgb25lIHpvbmUgaXMgYWN0aXZlIGF0IGFueSBnaXZlbiB0aW1lIHdoaWNoIGNhbiBiZSByZXRyaWV2ZWQgdXNpbmdcbiAqIFtab25lI2N1cnJlbnRdLlxuICpcbiAqXG4gKlxuICogIyMgQ2FsbGJhY2sgV3JhcHBpbmdcbiAqXG4gKiBBbiBpbXBvcnRhbnQgYXNwZWN0IG9mIHRoZSB6b25lcyBpcyB0aGF0IHRoZXkgc2hvdWxkIHBlcnNpc3QgYWNyb3NzIGFzeW5jaHJvbm91cyBvcGVyYXRpb25zLiBUb1xuICogYWNoaWV2ZSB0aGlzLCB3aGVuIGEgZnV0dXJlIHdvcmsgaXMgc2NoZWR1bGVkIHRocm91Z2ggYXN5bmMgQVBJLCBpdCBpcyBuZWNlc3NhcnkgdG8gY2FwdHVyZSwgYW5kXG4gKiBzdWJzZXF1ZW50bHkgcmVzdG9yZSB0aGUgY3VycmVudCB6b25lLiBGb3IgZXhhbXBsZSBpZiBhIGNvZGUgaXMgcnVubmluZyBpbiB6b25lIGBiYCBhbmQgaXRcbiAqIGludm9rZXMgYHNldFRpbWVvdXRgIHRvIHNjaGVkdWxlVGFzayB3b3JrIGxhdGVyLCB0aGUgYHNldFRpbWVvdXRgIG1ldGhvZCBuZWVkcyB0byAxKSBjYXB0dXJlIHRoZVxuICogY3VycmVudCB6b25lIGFuZCAyKSB3cmFwIHRoZSBgd3JhcENhbGxiYWNrYCBpbiBjb2RlIHdoaWNoIHdpbGwgcmVzdG9yZSB0aGUgY3VycmVudCB6b25lIGBiYCBvbmNlXG4gKiB0aGUgd3JhcENhbGxiYWNrIGV4ZWN1dGVzLiBJbiB0aGlzIHdheSB0aGUgcnVsZXMgd2hpY2ggZ292ZXJuIHRoZSBjdXJyZW50IGNvZGUgYXJlIHByZXNlcnZlZCBpblxuICogYWxsIGZ1dHVyZSBhc3luY2hyb25vdXMgdGFza3MuIFRoZXJlIGNvdWxkIGJlIGEgZGlmZmVyZW50IHpvbmUgYGNgIHdoaWNoIGhhcyBkaWZmZXJlbnQgcnVsZXMgYW5kXG4gKiBpcyBhc3NvY2lhdGVkIHdpdGggZGlmZmVyZW50IGFzeW5jaHJvbm91cyB0YXNrcy4gQXMgdGhlc2UgdGFza3MgYXJlIHByb2Nlc3NlZCwgZWFjaCBhc3luY2hyb25vdXNcbiAqIHdyYXBDYWxsYmFjayBjb3JyZWN0bHkgcmVzdG9yZXMgdGhlIGNvcnJlY3Qgem9uZSwgYXMgd2VsbCBhcyBwcmVzZXJ2ZXMgdGhlIHpvbmUgZm9yIGZ1dHVyZVxuICogYXN5bmNocm9ub3VzIGNhbGxiYWNrcy5cbiAqXG4gKiBFeGFtcGxlOiBTdXBwb3NlIGEgYnJvd3NlciBwYWdlIGNvbnNpc3Qgb2YgYXBwbGljYXRpb24gY29kZSBhcyB3ZWxsIGFzIHRoaXJkLXBhcnR5XG4gKiBhZHZlcnRpc2VtZW50IGNvZGUuIChUaGVzZSB0d28gY29kZSBiYXNlcyBhcmUgaW5kZXBlbmRlbnQsIGRldmVsb3BlZCBieSBkaWZmZXJlbnQgbXV0dWFsbHlcbiAqIHVuYXdhcmUgZGV2ZWxvcGVycy4pIFRoZSBhcHBsaWNhdGlvbiBjb2RlIG1heSBiZSBpbnRlcmVzdGVkIGluIGRvaW5nIGdsb2JhbCBlcnJvciBoYW5kbGluZyBhbmRcbiAqIHNvIGl0IGNvbmZpZ3VyZXMgdGhlIGBhcHBgIHpvbmUgdG8gc2VuZCBhbGwgb2YgdGhlIGVycm9ycyB0byB0aGUgc2VydmVyIGZvciBhbmFseXNpcywgYW5kIHRoZW5cbiAqIGV4ZWN1dGVzIHRoZSBhcHBsaWNhdGlvbiBpbiB0aGUgYGFwcGAgem9uZS4gVGhlIGFkdmVydGlzaW5nIGNvZGUgaXMgaW50ZXJlc3RlZCBpbiB0aGUgc2FtZVxuICogZXJyb3IgcHJvY2Vzc2luZyBidXQgaXQgbmVlZHMgdG8gc2VuZCB0aGUgZXJyb3JzIHRvIGEgZGlmZmVyZW50IHRoaXJkLXBhcnR5LiBTbyBpdCBjcmVhdGVzIHRoZVxuICogYGFkc2Agem9uZSB3aXRoIGEgZGlmZmVyZW50IGVycm9yIGhhbmRsZXIuIE5vdyBib3RoIGFkdmVydGlzaW5nIGFzIHdlbGwgYXMgYXBwbGljYXRpb24gY29kZVxuICogY3JlYXRlIG1hbnkgYXN5bmNocm9ub3VzIG9wZXJhdGlvbnMsIGJ1dCB0aGUgW1pvbmVdIHdpbGwgZW5zdXJlIHRoYXQgYWxsIG9mIHRoZSBhc3luY2hyb25vdXNcbiAqIG9wZXJhdGlvbnMgY3JlYXRlZCBmcm9tIHRoZSBhcHBsaWNhdGlvbiBjb2RlIHdpbGwgZXhlY3V0ZSBpbiBgYXBwYCB6b25lIHdpdGggaXRzIGVycm9yXG4gKiBoYW5kbGVyIGFuZCBhbGwgb2YgdGhlIGFkdmVydGlzZW1lbnQgY29kZSB3aWxsIGV4ZWN1dGUgaW4gdGhlIGBhZHNgIHpvbmUgd2l0aCBpdHMgZXJyb3IgaGFuZGxlci5cbiAqIFRoaXMgd2lsbCBub3Qgb25seSB3b3JrIGZvciB0aGUgYXN5bmMgb3BlcmF0aW9ucyBjcmVhdGVkIGRpcmVjdGx5LCBidXQgYWxzbyBmb3IgYWxsIHN1YnNlcXVlbnRcbiAqIGFzeW5jaHJvbm91cyBvcGVyYXRpb25zLlxuICpcbiAqIElmIHlvdSB0aGluayBvZiBjaGFpbiBvZiBhc3luY2hyb25vdXMgb3BlcmF0aW9ucyBhcyBhIHRocmVhZCBvZiBleGVjdXRpb24gKGJpdCBvZiBhIHN0cmV0Y2gpXG4gKiB0aGVuIFtab25lI2N1cnJlbnRdIHdpbGwgYWN0IGFzIGEgdGhyZWFkIGxvY2FsIHZhcmlhYmxlLlxuICpcbiAqXG4gKlxuICogIyMgQXN5bmNocm9ub3VzIG9wZXJhdGlvbiBzY2hlZHVsaW5nXG4gKlxuICogSW4gYWRkaXRpb24gdG8gd3JhcHBpbmcgdGhlIGNhbGxiYWNrcyB0byByZXN0b3JlIHRoZSB6b25lLCBhbGwgb3BlcmF0aW9ucyB3aGljaCBjYXVzZSBhXG4gKiBzY2hlZHVsaW5nIG9mIHdvcmsgZm9yIGxhdGVyIGFyZSByb3V0ZWQgdGhyb3VnaCB0aGUgY3VycmVudCB6b25lIHdoaWNoIGlzIGFsbG93ZWQgdG8gaW50ZXJjZXB0XG4gKiB0aGVtIGJ5IGFkZGluZyB3b3JrIGJlZm9yZSBvciBhZnRlciB0aGUgd3JhcENhbGxiYWNrIGFzIHdlbGwgYXMgdXNpbmcgZGlmZmVyZW50IG1lYW5zIG9mXG4gKiBhY2hpZXZpbmcgdGhlIHJlcXVlc3QuIChVc2VmdWwgZm9yIHVuaXQgdGVzdGluZywgb3IgdHJhY2tpbmcgb2YgcmVxdWVzdHMpLiBJbiBzb21lIGluc3RhbmNlc1xuICogc3VjaCBhcyBgc2V0VGltZW91dGAgdGhlIHdyYXBwaW5nIG9mIHRoZSB3cmFwQ2FsbGJhY2sgYW5kIHNjaGVkdWxpbmcgaXMgZG9uZSBpbiB0aGUgc2FtZVxuICogd3JhcENhbGxiYWNrLCBidXQgdGhlcmUgYXJlIG90aGVyIGV4YW1wbGVzIHN1Y2ggYXMgYFByb21pc2VzYCB3aGVyZSB0aGUgYHRoZW5gIHdyYXBDYWxsYmFjayBpc1xuICogd3JhcHBlZCwgYnV0IHRoZSBleGVjdXRpb24gb2YgYHRoZW5gIGluIHRyaWdnZXJlZCBieSBgUHJvbWlzZWAgc2NoZWR1bGluZyBgcmVzb2x2ZWAgd29yay5cbiAqXG4gKiBGdW5kYW1lbnRhbGx5IHRoZXJlIGFyZSB0aHJlZSBraW5kcyBvZiB0YXNrcyB3aGljaCBjYW4gYmUgc2NoZWR1bGVkOlxuICpcbiAqIDEuIFtNaWNyb1Rhc2tdIHVzZWQgZm9yIGRvaW5nIHdvcmsgcmlnaHQgYWZ0ZXIgdGhlIGN1cnJlbnQgdGFzay4gVGhpcyBpcyBub24tY2FuY2VsYWJsZSB3aGljaCBpc1xuICogICAgZ3VhcmFudGVlZCB0byBydW4gZXhhY3RseSBvbmNlIGFuZCBpbW1lZGlhdGVseS5cbiAqIDIuIFtNYWNyb1Rhc2tdIHVzZWQgZm9yIGRvaW5nIHdvcmsgbGF0ZXIuIFN1Y2ggYXMgYHNldFRpbWVvdXRgLiBUaGlzIGlzIHR5cGljYWxseSBjYW5jZWxhYmxlXG4gKiAgICB3aGljaCBpcyBndWFyYW50ZWVkIHRvIGV4ZWN1dGUgYXQgbGVhc3Qgb25jZSBhZnRlciBzb21lIHdlbGwgdW5kZXJzdG9vZCBkZWxheS5cbiAqIDMuIFtFdmVudFRhc2tdIHVzZWQgZm9yIGxpc3RlbmluZyBvbiBzb21lIGZ1dHVyZSBldmVudC4gVGhpcyBtYXkgZXhlY3V0ZSB6ZXJvIG9yIG1vcmUgdGltZXMsIHdpdGhcbiAqICAgIGFuIHVua25vd24gZGVsYXkuXG4gKlxuICogRWFjaCBhc3luY2hyb25vdXMgQVBJIGlzIG1vZGVsZWQgYW5kIHJvdXRlZCB0aHJvdWdoIG9uZSBvZiB0aGVzZSBBUElzLlxuICpcbiAqXG4gKiAjIyMgW01pY3JvVGFza11cbiAqXG4gKiBbTWljcm9UYXNrXXMgcmVwcmVzZW50IHdvcmsgd2hpY2ggd2lsbCBiZSBkb25lIGluIGN1cnJlbnQgVk0gdHVybiBhcyBzb29uIGFzIHBvc3NpYmxlLCBiZWZvcmUgVk1cbiAqIHlpZWxkaW5nLlxuICpcbiAqXG4gKiAjIyMgW1RpbWVyVGFza11cbiAqXG4gKiBbVGltZXJUYXNrXXMgcmVwcmVzZW50cyB3b3JrIHdoaWNoIHdpbGwgYmUgZG9uZSBhZnRlciBzb21lIGRlbGF5LiAoU29tZXRpbWVzIHRoZSBkZWxheSBpc1xuICogYXBwcm94aW1hdGUgc3VjaCBhcyBvbiBuZXh0IGF2YWlsYWJsZSBhbmltYXRpb24gZnJhbWUpLiBUeXBpY2FsbHkgdGhlc2UgbWV0aG9kcyBpbmNsdWRlOlxuICogYHNldFRpbWVvdXRgLCBgc2V0SW1tZWRpYXRlYCwgYHNldEludGVydmFsYCwgYHJlcXVlc3RBbmltYXRpb25GcmFtZWAsIGFuZCBhbGwgYnJvd3NlciBzcGVjaWZcbiAqIHZhcmlhbnRzLlxuICpcbiAqXG4gKiAjIyMgW0V2ZW50VGFza11cbiAqXG4gKiBbRXZlbnRUYXNrXXMgcmVwcmVzZW50cyBhIHJlcXVlc3QgdG8gY3JlYXRlIGEgbGlzdGVuZXIgb24gYW4gZXZlbnQuIFVubGlrZSB0aGUgb3RoZXIgdGFza1xuICogZXZlbnRzIG1heSBuZXZlciBiZSBleGVjdXRlZCwgYnV0IHR5cGljYWxseSBleGVjdXRlIG1vcmUgdGhlbiBvbmNlLiBUaGVyZSBpcyBubyBxdWV1ZSBvZlxuICogZXZlbnRzLCByYXRoZXIgdGhlaXIgY2FsbGJhY2tzIGFyZSB1bnByZWRpY3RhYmxlIGJvdGggaW4gb3JkZXIgYW5kIHRpbWUuXG4gKlxuICpcbiAqICMjIEdsb2JhbCBFcnJvciBIYW5kbGluZ1xuICpcbiAqXG4gKiAjIyBDb21wb3NhYmlsaXR5XG4gKlxuICogWm9uZXMgY2FuIGJlIGNvbXBvc2VkIHRvZ2V0aGVyIHRocm91Z2ggW1pvbmUuZm9yaygpXS4gQSBjaGlsZCB6b25lIG1heSBjcmVhdGUgaXRzIG93biBzZXQgb2ZcbiAqIHJ1bGVzLiBBIGNoaWxkIHpvbmUgaXMgZXhwZWN0ZWQgdG8gZWl0aGVyOlxuICpcbiAqIDEuIERlbGVnYXRlIHRoZSBpbnRlcmNlcHRpb24gdG8gYSBwYXJlbnQgem9uZSwgYW5kIG9wdGlvbmFsbHkgYWRkIGJlZm9yZSBhbmQgYWZ0ZXIgd3JhcENhbGxiYWNrXG4gKiAgICBob29rLnNcbiAqIDIpIE9yIHByb2Nlc3MgdGhlIHJlcXVlc3QgaXRzZWxmIHdpdGhvdXQgZGVsZWdhdGlvbi5cbiAqXG4gKiBDb21wb3NhYmlsaXR5IGFsbG93cyB6b25lcyB0byBrZWVwIHRoZWlyIGNvbmNlcm5zIGNsZWFuLiBGb3IgZXhhbXBsZSBhIHRvcCBtb3N0IHpvbmUgbWF5IGNob3NlXG4gKiB0byBoYW5kbGUgZXJyb3IgaGFuZGxpbmcsIHdoaWxlIGNoaWxkIHpvbmVzIG1heSBjaG9zZSB0byBkbyB1c2VyIGFjdGlvbiB0cmFja2luZy5cbiAqXG4gKlxuICogIyMgUm9vdCBab25lXG4gKlxuICogQXQgdGhlIHN0YXJ0IHRoZSBicm93c2VyIHdpbGwgcnVuIGluIGEgc3BlY2lhbCByb290IHpvbmUsIHdoaWNoIGlzIGNvbmZpZ3VyZSB0byBiZWhhdmUgZXhhY3RseVxuICogbGlrZSB0aGUgcGxhdGZvcm0sIG1ha2luZyBhbnkgZXhpc3RpbmcgY29kZSB3aGljaCBpcyBub3Qtem9uZSBhd2FyZSBiZWhhdmUgYXMgZXhwZWN0ZWQuIEFsbFxuICogem9uZXMgYXJlIGNoaWxkcmVuIG9mIHRoZSByb290IHpvbmUuXG4gKlxuICovXG5pbnRlcmZhY2UgWm9uZSB7XG4gIC8qKlxuICAgKlxuICAgKiBAcmV0dXJucyB7Wm9uZX0gVGhlIHBhcmVudCBab25lLlxuICAgKi9cbiAgcGFyZW50OiBab25lO1xuICAvKipcbiAgICogQHJldHVybnMge3N0cmluZ30gVGhlIFpvbmUgbmFtZSAodXNlZnVsIGZvciBkZWJ1Z2dpbmcpXG4gICAqL1xuICBuYW1lOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggdGhlIGBrZXlgLlxuICAgKlxuICAgKiBJZiB0aGUgY3VycmVudCB6b25lIGRvZXMgbm90IGhhdmUgYSBrZXksIHRoZSByZXF1ZXN0IGlzIGRlbGVnYXRlZCB0byB0aGUgcGFyZW50IHpvbmUuIFVzZVxuICAgKiBbWm9uZVNwZWMucHJvcGVydGllc10gdG8gY29uZmlndXJlIHRoZSBzZXQgb2YgcHJvcGVydGllcyBhc3NlY2lhdGVkIHdpdGggdGhlIGN1cnJlbnQgem9uZS5cbiAgICpcbiAgICogQHBhcmFtIGtleSBUaGUga2V5IHRvIHJldHJpZXZlLlxuICAgKiBAcmV0dXJucyB7YW55fSBUaGEgdmFsdWUgZm9yIHRoZSBrZXksIG9yIGB1bmRlZmluZWRgIGlmIG5vdCBmb3VuZC5cbiAgICovXG4gIGdldChrZXk6IHN0cmluZyk6IGFueTtcbiAgLyoqXG4gICAqIFVzZWQgdG8gY3JlYXRlIGEgY2hpbGQgem9uZS5cbiAgICpcbiAgICogQHBhcmFtIHpvbmVTcGVjIEEgc2V0IG9mIHJ1bGVzIHdoaWNoIHRoZSBjaGlsZCB6b25lIHNob3VsZCBmb2xsb3cuXG4gICAqIEByZXR1cm5zIHtab25lfSBBIG5ldyBjaGlsZCB6b25lLlxuICAgKi9cbiAgZm9yayh6b25lU3BlYzogWm9uZVNwZWMpOiBab25lO1xuICAvKipcbiAgICogV3JhcHMgYSBjYWxsYmFjayBmdW5jdGlvbiBpbiBhIG5ldyBmdW5jdGlvbiB3aGljaCB3aWxsIHByb3Blcmx5IHJlc3RvcmUgdGhlIGN1cnJlbnQgem9uZSB1cG9uXG4gICAqIGludm9jYXRpb24uXG4gICAqXG4gICAqIFRoZSB3cmFwcGVkIGZ1bmN0aW9uIHdpbGwgcHJvcGVybHkgZm9yd2FyZCBgdGhpc2AgYXMgd2VsbCBhcyBgYXJndW1lbnRzYCB0byB0aGUgYGNhbGxiYWNrYC5cbiAgICpcbiAgICogQmVmb3JlIHRoZSBmdW5jdGlvbiBpcyB3cmFwcGVkIHRoZSB6b25lIGNhbiBpbnRlcmNlcHQgdGhlIGBjYWxsYmFja2AgYnkgZGVjbGFyaW5nXG4gICAqIFtab25lU3BlYy5vbkludGVyY2VwdF0uXG4gICAqXG4gICAqIEBwYXJhbSBjYWxsYmFjayB0aGUgZnVuY3Rpb24gd2hpY2ggd2lsbCBiZSB3cmFwcGVkIGluIHRoZSB6b25lLlxuICAgKiBAcGFyYW0gc291cmNlIEEgdW5pcXVlIGRlYnVnIGxvY2F0aW9uIG9mIHRoZSBBUEkgYmVpbmcgd3JhcHBlZC5cbiAgICogQHJldHVybnMge2Z1bmN0aW9uKCk6ICp9IEEgZnVuY3Rpb24gd2hpY2ggd2lsbCBpbnZva2UgdGhlIGBjYWxsYmFja2AgdGhyb3VnaCBbWm9uZS5ydW5HdWFyZGVkXS5cbiAgICovXG4gIHdyYXAoY2FsbGJhY2s6IEZ1bmN0aW9uLCBzb3VyY2U6IHN0cmluZyk6IEZ1bmN0aW9uO1xuICAvKipcbiAgICogSW52b2tlcyBhIGZ1bmN0aW9uIGluIGEgZ2l2ZW4gem9uZS5cbiAgICpcbiAgICogVGhlIGludm9jYXRpb24gb2YgYGNhbGxiYWNrYCBjYW4gYmUgaW50ZXJjZXB0ZWQgYmUgZGVjbGFyaW5nIFtab25lU3BlYy5vbkludm9rZV0uXG4gICAqXG4gICAqIEBwYXJhbSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdG8gaW52b2tlLlxuICAgKiBAcGFyYW0gYXBwbHlUaGlzXG4gICAqIEBwYXJhbSBhcHBseUFyZ3NcbiAgICogQHBhcmFtIHNvdXJjZSBBIHVuaXF1ZSBkZWJ1ZyBsb2NhdGlvbiBvZiB0aGUgQVBJIGJlaW5nIGludm9rZWQuXG4gICAqIEByZXR1cm5zIHthbnl9IFZhbHVlIGZyb20gdGhlIGBjYWxsYmFja2AgZnVuY3Rpb24uXG4gICAqL1xuICBydW48VD4oY2FsbGJhY2s6IEZ1bmN0aW9uLCBhcHBseVRoaXM/OiBhbnksIGFwcGx5QXJncz86IGFueVtdLCBzb3VyY2U/OiBzdHJpbmcpOiBUO1xuICAvKipcbiAgICogSW52b2tlcyBhIGZ1bmN0aW9uIGluIGEgZ2l2ZW4gem9uZSBhbmQgY2F0Y2hlcyBhbnkgZXhjZXB0aW9ucy5cbiAgICpcbiAgICogQW55IGV4Y2VwdGlvbnMgdGhyb3duIHdpbGwgYmUgZm9yd2FyZGVkIHRvIFtab25lLkhhbmRsZUVycm9yXS5cbiAgICpcbiAgICogVGhlIGludm9jYXRpb24gb2YgYGNhbGxiYWNrYCBjYW4gYmUgaW50ZXJjZXB0ZWQgYmUgZGVjbGFyaW5nIFtab25lU3BlYy5vbkludm9rZV0uIFRoZVxuICAgKiBoYW5kbGluZyBvZiBleGNlcHRpb25zIGNhbiBpbnRlcmNlcHRlZCBieSBkZWNsYXJpbmcgW1pvbmVTcGVjLmhhbmRsZUVycm9yXS5cbiAgICpcbiAgICogQHBhcmFtIGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0byBpbnZva2UuXG4gICAqIEBwYXJhbSBhcHBseVRoaXNcbiAgICogQHBhcmFtIGFwcGx5QXJnc1xuICAgKiBAcGFyYW0gc291cmNlIEEgdW5pcXVlIGRlYnVnIGxvY2F0aW9uIG9mIHRoZSBBUEkgYmVpbmcgaW52b2tlZC5cbiAgICogQHJldHVybnMge2FueX0gVmFsdWUgZnJvbSB0aGUgYGNhbGxiYWNrYCBmdW5jdGlvbi5cbiAgICovXG4gIHJ1bkd1YXJkZWQ8VD4oY2FsbGJhY2s6IEZ1bmN0aW9uLCBhcHBseVRoaXM/OiBhbnksIGFwcGx5QXJncz86IGFueVtdLCBzb3VyY2U/OiBzdHJpbmcpOiBUO1xuICAvKipcbiAgICogRXhlY3V0ZSB0aGUgVGFzayBieSByZXN0b3JpbmcgdGhlIFtab25lLmN1cnJlbnRUYXNrXSBpbiB0aGUgVGFzaydzIHpvbmUuXG4gICAqXG4gICAqIEBwYXJhbSBjYWxsYmFja1xuICAgKiBAcGFyYW0gYXBwbHlUaGlzXG4gICAqIEBwYXJhbSBhcHBseUFyZ3NcbiAgICogQHJldHVybnMgeyp9XG4gICAqL1xuICBydW5UYXNrKHRhc2s6IFRhc2ssIGFwcGx5VGhpcz86IGFueSwgYXBwbHlBcmdzPzogYW55KTogYW55O1xuICBzY2hlZHVsZU1pY3JvVGFzayhzb3VyY2U6IHN0cmluZywgY2FsbGJhY2s6IEZ1bmN0aW9uLCBkYXRhPzogVGFza0RhdGEsIGN1c3RvbVNjaGVkdWxlPzogKHRhc2s6IFRhc2spID0+IHZvaWQpOiBNaWNyb1Rhc2s7XG4gIHNjaGVkdWxlTWFjcm9UYXNrKHNvdXJjZTogc3RyaW5nLCBjYWxsYmFjazogRnVuY3Rpb24sIGRhdGE6IFRhc2tEYXRhLCBjdXN0b21TY2hlZHVsZTogKHRhc2s6IFRhc2spID0+IHZvaWQsIGN1c3RvbUNhbmNlbDogKHRhc2s6IFRhc2spID0+IHZvaWQpOiBNYWNyb1Rhc2s7XG4gIHNjaGVkdWxlRXZlbnRUYXNrKHNvdXJjZTogc3RyaW5nLCBjYWxsYmFjazogRnVuY3Rpb24sIGRhdGE6IFRhc2tEYXRhLCBjdXN0b21TY2hlZHVsZTogKHRhc2s6IFRhc2spID0+IHZvaWQsIGN1c3RvbUNhbmNlbDogKHRhc2s6IFRhc2spID0+IHZvaWQpOiBFdmVudFRhc2s7XG4gIC8qKlxuICAgKiBBbGxvd3MgdGhlIHpvbmUgdG8gaW50ZXJjZXB0IGNhbmNlbGluZyBvZiBzY2hlZHVsZWQgVGFzay5cbiAgICpcbiAgICogVGhlIGludGVyY2VwdGlvbiBpcyBjb25maWd1cmVkIHVzaW5nIFtab25lU3BlYy5vbkNhbmNlbFRhc2tdLiBUaGUgZGVmYXVsdCBjYW5jZWxlciBpbnZva2VzXG4gICAqIHRoZSBbVGFzay5jYW5jZWxGbl0uXG4gICAqXG4gICAqIEBwYXJhbSB0YXNrXG4gICAqIEByZXR1cm5zIHthbnl9XG4gICAqL1xuICBjYW5jZWxUYXNrKHRhc2s6IFRhc2spOiBhbnk7XG59XG5cbmludGVyZmFjZSBab25lVHlwZSB7XG4gIC8qKlxuICAgKiBAcmV0dXJucyB7Wm9uZX0gUmV0dXJucyB0aGUgY3VycmVudCBbWm9uZV0uIFJldHVybnMgdGhlIGN1cnJlbnQgem9uZS4gVGhlIG9ubHkgd2F5IHRvIGNoYW5nZVxuICAgKiB0aGUgY3VycmVudCB6b25lIGlzIGJ5IGludm9raW5nIGEgcnVuKCkgbWV0aG9kLCB3aGljaCB3aWxsIHVwZGF0ZSB0aGUgY3VycmVudCB6b25lIGZvciB0aGVcbiAgICogZHVyYXRpb24gb2YgdGhlIHJ1biBtZXRob2QgY2FsbGJhY2suXG4gICAqL1xuICBjdXJyZW50OiBab25lO1xuICAvKipcbiAgICogQHJldHVybnMge1Rhc2t9IFRoZSB0YXNrIGFzc29jaWF0ZWQgd2l0aCB0aGUgY3VycmVudCBleGVjdXRpb24uXG4gICAqL1xuICBjdXJyZW50VGFzazogVGFzaztcbn1cblxuLyoqXG4gKiBQcm92aWRlcyBhIHdheSB0byBjb25maWd1cmUgdGhlIGludGVyY2VwdGlvbiBvZiB6b25lIGV2ZW50cy5cbiAqXG4gKiBPbmx5IHRoZSBgbmFtZWAgcHJvcGVydHkgaXMgcmVxdWlyZWQgKGFsbCBvdGhlciBhcmUgb3B0aW9uYWwpLlxuICovXG5pbnRlcmZhY2UgWm9uZVNwZWMge1xuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIHpvbmUuIFVzZWZ1bGwgd2hlbiBkZWJ1Z2dpbmcgWm9uZXMuXG4gICAqL1xuICBuYW1lOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEEgc2V0IG9mIHByb3BlcnRpZXMgdG8gYmUgYXNzb2NpYXRlZCB3aXRoIFpvbmUuIFVzZSBbWm9uZS5nZXRdIHRvIHJldHJpdmUgdGhlbS5cbiAgICovXG4gIHByb3BlcnRpZXM/OiB7W2tleTogc3RyaW5nXTogYW55fTtcblxuICAvKipcbiAgICogQWxsb3dzIHRoZSBpbnRlcmNlcHRpb24gb2Ygem9uZSBmb3JraW5nLlxuICAgKlxuICAgKiBXaGVuIHRoZSB6b25lIGlzIGJlaW5nIGZvcmtlZCwgdGhlIHJlcXVlc3QgaXMgZm9yd2FyZGVkIHRvIHRoaXMgbWV0aG9kIGZvciBpbnRlcmNlcHRpb24uXG4gICAqXG4gICAqIEBwYXJhbSBwYXJlbnRab25lRGVsZWdhdGUgRGFsZWdhdGUgd2hpY2ggcGVyZm9ybXMgdGhlIHBhcmVudCBbWm9uZVNwZWNdIG9wZXJhdGlvbi5cbiAgICogQHBhcmFtIGN1cnJlbnRab25lIFRoZSBjdXJyZW50IFtab25lXSB3aGVyZSB0aGUgY3VycmVudCBpbnRlcmNlcHRvciBoYXMgYmVlZCBkZWNsYXJlZC5cbiAgICogQHBhcmFtIHRhcmdldFpvbmUgVGhlIFtab25lXSB3aGljaCBvcmlnaW5hbGx5IHJlY2VpdmVkIHRoZSByZXF1ZXN0LlxuICAgKiBAcGFyYW0gem9uZVNwZWMgVGhlIGFyZ3VtZW50IHBhc3NlZCBpbnRvIHRoZSBgZm9ya2AgbWV0aG9kLlxuICAgKi9cbiAgb25Gb3JrPzogKHBhcmVudFpvbmVEZWxlZ2F0ZTogWm9uZURlbGVnYXRlLCBjdXJyZW50Wm9uZTogWm9uZSwgdGFyZ2V0Wm9uZTogWm9uZSxcbiAgICAgICAgICAgIHpvbmVTcGVjOiBab25lU3BlYykgPT4gIFpvbmU7XG5cbiAgLyoqXG4gICAqIEFsbG93cyBpbnRlcmNlcHRpb24gb2YgdGhlIHdyYXBwaW5nIG9mIHRoZSBjYWxsYmFjay5cbiAgICpcbiAgICogQHBhcmFtIHBhcmVudFpvbmVEZWxlZ2F0ZSBEYWxlZ2F0ZSB3aGljaCBwZXJmb3JtcyB0aGUgcGFyZW50IFtab25lU3BlY10gb3BlcmF0aW9uLlxuICAgKiBAcGFyYW0gY3VycmVudFpvbmUgVGhlIGN1cnJlbnQgW1pvbmVdIHdoZXJlIHRoZSBjdXJyZW50IGludGVyY2VwdG9yIGhhcyBiZWVkIGRlY2xhcmVkLlxuICAgKiBAcGFyYW0gdGFyZ2V0Wm9uZSBUaGUgW1pvbmVdIHdoaWNoIG9yaWdpbmFsbHkgcmVjZWl2ZWQgdGhlIHJlcXVlc3QuXG4gICAqIEBwYXJhbSBkZWxlZ2F0ZSBUaGUgYXJndW1lbnQgcGFzc2VkIGludG8gdGhlIGB3YXJwYCBtZXRob2QuXG4gICAqIEBwYXJhbSBzb3VyY2UgVGhlIGFyZ3VtZW50IHBhc3NlZCBpbnRvIHRoZSBgd2FycGAgbWV0aG9kLlxuICAgKi9cbiAgb25JbnRlcmNlcHQ/OiAocGFyZW50Wm9uZURlbGVnYXRlOiBab25lRGVsZWdhdGUsIGN1cnJlbnRab25lOiBab25lLCB0YXJnZXRab25lOiBab25lLFxuICAgICAgICAgICAgICAgICBkZWxlZ2F0ZTogRnVuY3Rpb24sIHNvdXJjZTogc3RyaW5nKSA9PiBGdW5jdGlvbjtcblxuICAvKipcbiAgICogQWxsb3dzIGludGVyY2VwdGlvbiBvZiB0aGUgY2FsbGJhY2sgaW52b2NhdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHBhcmVudFpvbmVEZWxlZ2F0ZSBEYWxlZ2F0ZSB3aGljaCBwZXJmb3JtcyB0aGUgcGFyZW50IFtab25lU3BlY10gb3BlcmF0aW9uLlxuICAgKiBAcGFyYW0gY3VycmVudFpvbmUgVGhlIGN1cnJlbnQgW1pvbmVdIHdoZXJlIHRoZSBjdXJyZW50IGludGVyY2VwdG9yIGhhcyBiZWVkIGRlY2xhcmVkLlxuICAgKiBAcGFyYW0gdGFyZ2V0Wm9uZSBUaGUgW1pvbmVdIHdoaWNoIG9yaWdpbmFsbHkgcmVjZWl2ZWQgdGhlIHJlcXVlc3QuXG4gICAqIEBwYXJhbSBkZWxlZ2F0ZSBUaGUgYXJndW1lbnQgcGFzc2VkIGludG8gdGhlIGBydW5gIG1ldGhvZC5cbiAgICogQHBhcmFtIGFwcGx5VGhpcyBUaGUgYXJndW1lbnQgcGFzc2VkIGludG8gdGhlIGBydW5gIG1ldGhvZC5cbiAgICogQHBhcmFtIGFwcGx5QXJncyBUaGUgYXJndW1lbnQgcGFzc2VkIGludG8gdGhlIGBydW5gIG1ldGhvZC5cbiAgICogQHBhcmFtIHNvdXJjZSBUaGUgYXJndW1lbnQgcGFzc2VkIGludG8gdGhlIGBydW5gIG1ldGhvZC5cbiAgICovXG4gIG9uSW52b2tlPzogKHBhcmVudFpvbmVEZWxlZ2F0ZTogWm9uZURlbGVnYXRlLCBjdXJyZW50Wm9uZTogWm9uZSwgdGFyZ2V0Wm9uZTogWm9uZSxcbiAgICAgICAgICAgICAgZGVsZWdhdGU6IEZ1bmN0aW9uLCBhcHBseVRoaXM6IGFueSwgYXBwbHlBcmdzOiBhbnlbXSwgc291cmNlOiBzdHJpbmcpID0+IGFueTtcblxuICAvKipcbiAgICogQWxsb3dzIGludGVyY2VwdGlvbiBvZiB0aGUgZXJyb3IgaGFuZGxpbmcuXG4gICAqXG4gICAqIEBwYXJhbSBwYXJlbnRab25lRGVsZWdhdGUgRGFsZWdhdGUgd2hpY2ggcGVyZm9ybXMgdGhlIHBhcmVudCBbWm9uZVNwZWNdIG9wZXJhdGlvbi5cbiAgICogQHBhcmFtIGN1cnJlbnRab25lIFRoZSBjdXJyZW50IFtab25lXSB3aGVyZSB0aGUgY3VycmVudCBpbnRlcmNlcHRvciBoYXMgYmVlZCBkZWNsYXJlZC5cbiAgICogQHBhcmFtIHRhcmdldFpvbmUgVGhlIFtab25lXSB3aGljaCBvcmlnaW5hbGx5IHJlY2VpdmVkIHRoZSByZXF1ZXN0LlxuICAgKiBAcGFyYW0gZXJyb3IgVGhlIGFyZ3VtZW50IHBhc3NlZCBpbnRvIHRoZSBgaGFuZGxlRXJyb3JgIG1ldGhvZC5cbiAgICovXG4gIG9uSGFuZGxlRXJyb3I/OiAocGFyZW50Wm9uZURlbGVnYXRlOiBab25lRGVsZWdhdGUsIGN1cnJlbnRab25lOiBab25lLCB0YXJnZXRab25lOiBab25lLFxuICAgICAgICAgICAgICAgICAgIGVycm9yOiBhbnkpID0+IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIEFsbG93cyBpbnRlcmNlcHRpb24gb2YgdGFzayBzY2hlZHVsaW5nLlxuICAgKlxuICAgKiBAcGFyYW0gcGFyZW50Wm9uZURlbGVnYXRlIERhbGVnYXRlIHdoaWNoIHBlcmZvcm1zIHRoZSBwYXJlbnQgW1pvbmVTcGVjXSBvcGVyYXRpb24uXG4gICAqIEBwYXJhbSBjdXJyZW50Wm9uZSBUaGUgY3VycmVudCBbWm9uZV0gd2hlcmUgdGhlIGN1cnJlbnQgaW50ZXJjZXB0b3IgaGFzIGJlZWQgZGVjbGFyZWQuXG4gICAqIEBwYXJhbSB0YXJnZXRab25lIFRoZSBbWm9uZV0gd2hpY2ggb3JpZ2luYWxseSByZWNlaXZlZCB0aGUgcmVxdWVzdC5cbiAgICogQHBhcmFtIHRhc2sgVGhlIGFyZ3VtZW50IHBhc3NlZCBpbnRvIHRoZSBgc2NoZWR1bGVUYXNrYCBtZXRob2QuXG4gICAqL1xuICBvblNjaGVkdWxlVGFzaz86IChwYXJlbnRab25lRGVsZWdhdGU6IFpvbmVEZWxlZ2F0ZSwgY3VycmVudFpvbmU6IFpvbmUsIHRhcmdldFpvbmU6IFpvbmUsXG4gICAgICAgICAgICAgICAgICAgIHRhc2s6IFRhc2spID0+IFRhc2s7XG5cbiAgb25JbnZva2VUYXNrPzogKHBhcmVudFpvbmVEZWxlZ2F0ZTogWm9uZURlbGVnYXRlLCBjdXJyZW50Wm9uZTogWm9uZSwgdGFyZ2V0Wm9uZTogWm9uZSxcbiAgICAgICAgICAgICAgICAgIHRhc2s6IFRhc2ssIGFwcGx5VGhpczogYW55LCBhcHBseUFyZ3M6IGFueSkgPT4gYW55O1xuXG4gIC8qKlxuICAgKiBBbGxvd3MgaW50ZXJjZXB0aW9uIG9mIHRhc2sgY2FuY2FsYXRpb24uXG4gICAqXG4gICAqIEBwYXJhbSBwYXJlbnRab25lRGVsZWdhdGUgRGFsZWdhdGUgd2hpY2ggcGVyZm9ybXMgdGhlIHBhcmVudCBbWm9uZVNwZWNdIG9wZXJhdGlvbi5cbiAgICogQHBhcmFtIGN1cnJlbnRab25lIFRoZSBjdXJyZW50IFtab25lXSB3aGVyZSB0aGUgY3VycmVudCBpbnRlcmNlcHRvciBoYXMgYmVlZCBkZWNsYXJlZC5cbiAgICogQHBhcmFtIHRhcmdldFpvbmUgVGhlIFtab25lXSB3aGljaCBvcmlnaW5hbGx5IHJlY2VpdmVkIHRoZSByZXF1ZXN0LlxuICAgKiBAcGFyYW0gdGFzayBUaGUgYXJndW1lbnQgcGFzc2VkIGludG8gdGhlIGBjYW5jZWxUYXNrYCBtZXRob2QuXG4gICAqL1xuICBvbkNhbmNlbFRhc2s/OiAocGFyZW50Wm9uZURlbGVnYXRlOiBab25lRGVsZWdhdGUsIGN1cnJlbnRab25lOiBab25lLCB0YXJnZXRab25lOiBab25lLFxuICAgICAgICAgICAgICAgICAgdGFzazogVGFzaykgPT4gYW55O1xuXG4gIC8qKlxuICAgKiBOb3RpZmllcyBvZiBjaGFuZ2VzIHRvIHRoZSB0YXNrIHF1ZXVlIGVtcHR5IHN0YXR1cy5cbiAgICpcbiAgICogQHBhcmFtIHBhcmVudFpvbmVEZWxlZ2F0ZSBEYWxlZ2F0ZSB3aGljaCBwZXJmb3JtcyB0aGUgcGFyZW50IFtab25lU3BlY10gb3BlcmF0aW9uLlxuICAgKiBAcGFyYW0gY3VycmVudFpvbmUgVGhlIGN1cnJlbnQgW1pvbmVdIHdoZXJlIHRoZSBjdXJyZW50IGludGVyY2VwdG9yIGhhcyBiZWVkIGRlY2xhcmVkLlxuICAgKiBAcGFyYW0gdGFyZ2V0Wm9uZSBUaGUgW1pvbmVdIHdoaWNoIG9yaWdpbmFsbHkgcmVjZWl2ZWQgdGhlIHJlcXVlc3QuXG4gICAqIEBwYXJhbSBpc0VtcHR5XG4gICAqL1xuICBvbkhhc1Rhc2s/OiAoZGVsZWdhdGU6IFpvbmVEZWxlZ2F0ZSwgY3VycmVudDogWm9uZSwgdGFyZ2V0OiBab25lLFxuICAgICAgICAgICAgICAgaGFzVGFza1N0YXRlOiBIYXNUYXNrU3RhdGUpID0+IHZvaWQ7XG59O1xuXG4vKipcbiAqICBBIGRlbGVnYXRlIHdoZW4gaW50ZXJjZXB0aW5nIHpvbmUgb3BlcmF0aW9ucy5cbiAqXG4gKiAgQSBab25lRGVsZWdhdGUgaXMgbmVlZGVkIGJlY2F1c2UgYSBjaGlsZCB6b25lIGNhbid0IHNpbXBseSBpbnZva2UgYSBtZXRob2Qgb24gYSBwYXJlbnQgem9uZS4gRm9yXG4gKiAgZXhhbXBsZSBhIGNoaWxkIHpvbmUgd3JhcCBjYW4ndCBqdXN0IGNhbGwgcGFyZW50IHpvbmUgd3JhcC4gRG9pbmcgc28gd291bGQgY3JlYXRlIGEgY2FsbGJhY2tcbiAqICB3aGljaCBpcyBib3VuZCB0byB0aGUgcGFyZW50IHpvbmUuIFdoYXQgd2UgYXJlIGludGVyZXN0ZWQgaXMgaW50ZXJjZXB0aW5nIHRoZSBjYWxsYmFjayBiZWZvcmUgaXRcbiAqICBpcyBib3VuZCB0byBhbnkgem9uZS4gRnVydGhlcm1vcmUsIHdlIGFsc28gbmVlZCB0byBwYXNzIHRoZSB0YXJnZXRab25lICh6b25lIHdoaWNoIHJlY2VpdmVkIHRoZVxuICogIG9yaWdpbmFsIHJlcXVlc3QpIHRvIHRoZSBkZWxlZ2F0ZS5cbiAqXG4gKiAgVGhlIFpvbmVEZWxlZ2F0ZSBtZXRob2RzIG1pcnJvciB0aG9zZSBvZiBab25lIHdpdGggYW4gYWRkaXRpb24gb2YgZXh0cmEgdGFyZ2V0Wm9uZSBhcmd1bWVudCBpblxuICogIHRoZSBtZXRob2Qgc2lnbmF0dXJlLiAoVGhlIG9yaWdpbmFsIFpvbmUgd2hpY2ggcmVjZWl2ZWQgdGhlIHJlcXVlc3QuKSBTb21lIG1ldGhvZHMgYXJlIHJlbmFtZWRcbiAqICB0byBwcmV2ZW50IGNvbmZ1c2lvbiwgYmVjYXVzZSB0aGV5IGhhdmUgc2xpZ2h0bHkgZGlmZmVyZW50IHNlbWFudGljcyBhbmQgYXJndW1lbnRzLlxuICpcbiAqICAtIGB3cmFwYCA9PiBgaW50ZXJjZXB0YDogVGhlIGB3cmFwYCBtZXRob2QgZGVsZWdhdGVzIHRvIGBpbnRlcmNlcHRgLiBUaGUgYHdyYXBgIG1ldGhvZCByZXR1cm5zXG4gKiAgICAgYSBjYWxsYmFjayB3aGljaCB3aWxsIHJ1biBpbiBhIGdpdmVuIHpvbmUsIHdoZXJlIGFzIGludGVyY2VwdCBhbGxvd3Mgd3JhcHBpbmcgdGhlIGNhbGxiYWNrXG4gKiAgICAgc28gdGhhdCBhZGRpdGlvbmFsIGNvZGUgY2FuIGJlIHJ1biBiZWZvcmUgYW5kIGFmdGVyLCBidXQgZG9lcyBub3QgYXNzb2NpYXRlZCB0aGUgY2FsbGJhY2tcbiAqICAgICB3aXRoIHRoZSB6b25lLlxuICogIC0gYHJ1bmAgPT4gYGludm9rZWA6IFRoZSBgcnVuYCBtZXRob2QgZGVsZWdhdGVzIHRvIGBpbnZva2VgIHRvIHBlcmZvcm0gdGhlIGFjdHVhbCBleGVjdXRpb24gb2ZcbiAqICAgICB0aGUgY2FsbGJhY2suIFRoZSBgcnVuYCBtZXRob2Qgc3dpdGNoZXMgdG8gbmV3IHpvbmU7IHNhdmVzIGFuZCByZXN0b3JlcyB0aGUgYFpvbmUuY3VycmVudGA7XG4gKiAgICAgYW5kIG9wdGlvbmFsbHkgcGVyZm9ybXMgZXJyb3IgaGFuZGxpbmcuIFRoZSBpbnZva2UgaXMgbm90IHJlc3BvbnNpYmxlIGZvciBlcnJvciBoYW5kbGluZyxcbiAqICAgICBvciB6b25lIG1hbmFnZW1lbnQuXG4gKlxuICogIE5vdCBldmVyeSBtZXRob2QgaXMgdXN1YWxseSBvdmVyd3JpdHRlbiBpbiB0aGUgY2hpbGQgem9uZSwgZm9yIHRoaXMgcmVhc29uIHRoZSBab25lRGVsZWdhdGVcbiAqICBzdG9yZXMgdGhlIGNsb3Nlc3Qgem9uZSB3aGljaCBvdmVyd3JpdGVzIHRoaXMgYmVoYXZpb3IgYWxvbmcgd2l0aCB0aGUgY2xvc2VzdCBab25lU3BlYy5cbiAqXG4gKiAgTk9URTogV2UgaGF2ZSB0cmllZCB0byBtYWtlIHRoaXMgQVBJIGFuYWxvZ291cyB0byBFdmVudCBidWJibGluZyB3aXRoIHRhcmdldCBhbmQgY3VycmVudFxuICogIHByb3BlcnRpZXMuXG4gKlxuICogIE5vdGU6IFRoZSBab25lRGVsZWdhdGUgdHJlYXRzIFpvbmVTcGVjIGFzIGNsYXNzLiBUaGlzIGFsbG93cyB0aGUgWm9uZVNwZWMgdG8gdXNlIGl0cyBgdGhpc2AgdG9cbiAqICBzdG9yZSBpbnRlcm5hbCBzdGF0ZS5cbiAqL1xuaW50ZXJmYWNlIFpvbmVEZWxlZ2F0ZSB7XG4gIHpvbmU6IFpvbmU7XG4gIGZvcmsodGFyZ2V0Wm9uZTogWm9uZSwgem9uZVNwZWM6IFpvbmVTcGVjKTogWm9uZTtcbiAgaW50ZXJjZXB0KHRhcmdldFpvbmU6IFpvbmUsIGNhbGxiYWNrOiBGdW5jdGlvbiwgc291cmNlOiBzdHJpbmcpOiBGdW5jdGlvbjtcbiAgaW52b2tlKHRhcmdldFpvbmU6IFpvbmUsIGNhbGxiYWNrOiBGdW5jdGlvbiwgYXBwbHlUaGlzOiBhbnksIGFwcGx5QXJnczogYW55W10sIHNvdXJjZTogc3RyaW5nKTogYW55O1xuICBoYW5kbGVFcnJvcih0YXJnZXRab25lOiBab25lLCBlcnJvcjogYW55KTogYm9vbGVhbjtcbiAgc2NoZWR1bGVUYXNrKHRhcmdldFpvbmU6IFpvbmUsIHRhc2s6IFRhc2spOiBUYXNrO1xuICBpbnZva2VUYXNrKHRhcmdldFpvbmU6IFpvbmUsIHRhc2s6IFRhc2ssIGFwcGx5VGhpczogYW55LCBhcHBseUFyZ3M6IGFueSk6IGFueTtcbiAgY2FuY2VsVGFzayh0YXJnZXRab25lOiBab25lLCB0YXNrOiBUYXNrKTogYW55O1xuICBoYXNUYXNrKHRhcmdldFpvbmU6IFpvbmUsIGlzRW1wdHk6IEhhc1Rhc2tTdGF0ZSk6IHZvaWQ7XG59XG5cbnR5cGUgSGFzVGFza1N0YXRlID0ge1xuICBtaWNyb1Rhc2s6IGJvb2xlYW4sXG4gIG1hY3JvVGFzazogYm9vbGVhbixcbiAgZXZlbnRUYXNrOiBib29sZWFuLFxuICBjaGFuZ2U6IFRhc2tUeXBlXG59O1xuXG4vKipcbiAqIFRhc2sgdHlwZTogYG1pY3JvVGFza2AsIGBtYWNyb1Rhc2tgLCBgZXZlbnRUYXNrYC5cbiAqL1xudHlwZSBUYXNrVHlwZSA9IHN0cmluZzsgLyogVFMgdjEuOCA9PiBcIm1pY3JvVGFza1wiIHwgXCJtYWNyb1Rhc2tcIiB8IFwiZXZlbnRUYXNrXCIgKi87XG5cbi8qKlxuICovXG5pbnRlcmZhY2UgVGFza0RhdGEge1xuICAvKipcbiAgICogQSBwZXJpb2RpYyBbTWFjcm9UYXNrXSBpcyBzdWNoIHdoaWNoIGdldCBhdXRvbWF0aWNhbGx5IHJlc2NoZWR1bGVkIGFmdGVyIGl0IGlzIGV4ZWN1dGVkLlxuICAgKi9cbiAgaXNQZXJpb2RpYz86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIERlbGF5IGluIG1pbGxpc2Vjb25kcyB3aGVuIHRoZSBUYXNrIHdpbGwgcnVuLlxuICAgKi9cbiAgZGVsYXk/OiBudW1iZXI7XG59XG5cbi8qKlxuICogUmVwcmVzZW50cyB3b3JrIHdoaWNoIGlzIGV4ZWN1dGVkIHdpdGggYSBjbGVhbiBzdGFjay5cbiAqXG4gKiBUYXNrcyBhcmUgdXNlZCBpbiBab25lcyB0byBtYXJrIHdvcmsgd2hpY2ggaXMgcGVyZm9ybWVkIG9uIGNsZWFuIHN0YWNrIGZyYW1lLiBUaGVyZSBhcmUgdGhyZWVcbiAqIGtpbmRzIG9mIHRhc2suIFtNaWNyb1Rhc2tdLCBbTWFjcm9UYXNrXSwgYW5kIFtFdmVudFRhc2tdLlxuICpcbiAqIEEgSlMgVk0gY2FuIGJlIG1vZGVsZWQgYXMgYSBbTWljcm9UYXNrXSBxdWV1ZSwgW01hY3JvVGFza10gcXVldWUsIGFuZCBbRXZlbnRUYXNrXSBzZXQuXG4gKlxuICogLSBbTWljcm9UYXNrXSBxdWV1ZSByZXByZXNlbnRzIGEgc2V0IG9mIHRhc2tzIHdoaWNoIGFyZSBleGVjdXRpbmcgcmlnaHQgYWZ0ZXIgdGhlIGN1cnJlbnQgc3RhY2tcbiAqICAgZnJhbWUgYmVjb21lcyBjbGVhbiBhbmQgYmVmb3JlIGEgVk0geWllbGQuIEFsbCBbTWljcm9UYXNrXXMgZXhlY3V0ZSBpbiBvcmRlciBvZiBpbnNlcnRpb25cbiAqICAgYmVmb3JlIFZNIHlpZWxkIGFuZCB0aGUgbmV4dCBbTWFjcm9UYXNrXSBpcyBleGVjdXRlZC5cbiAqIC0gW01hY3JvVGFza10gcXVldWUgcmVwcmVzZW50cyBhIHNldCBvZiB0YXNrcyB3aGljaCBhcmUgZXhlY3V0ZWQgb25lIGF0IGEgdGltZSBhZnRlciBlYWNoIFZNXG4gKiAgIHlpZWxkLiBUaGUgcXVldWUgaXMgb3JkZXIgYnkgdGltZSwgYW5kIGluc2VydGlvbnMgY2FuIGhhcHBlbiBpbiBhbnkgbG9jYXRpb24uXG4gKiAtIFtFdmVudFRhc2tdIGlzIGEgc2V0IG9mIHRhc2tzIHdoaWNoIGNhbiBhdCBhbnkgdGltZSBiZSBpbnNlcnRlZCB0byB0aGUgaGVhZCBvZiB0aGUgW01hY3JvVGFza11cbiAqICAgcXVldWUuIFRoaXMgaGFwcGVucyB3aGVuIHRoZSBldmVudCBmaXJlcy5cbiAqXG4gKi9cbmludGVyZmFjZSBUYXNrIHtcbiAgLyoqXG4gICAqIFRhc2sgdHlwZTogYG1pY3JvVGFza2AsIGBtYWNyb1Rhc2tgLCBgZXZlbnRUYXNrYC5cbiAgICovXG4gIHR5cGU6IFRhc2tUeXBlO1xuXG4gIC8qKlxuICAgKiBEZWJ1ZyBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBBUEkgd2hpY2ggcmVxdWVzdGVkIHRoZSBzY2hlZHVsaW5nIG9mIHRoZSB0YXNrLlxuICAgKi9cbiAgc291cmNlOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBGdW5jdGlvbiB0byBiZSB1c2VkIGJ5IHRoZSBWTSBvbiBlbnRlcmluZyB0aGUgW1Rhc2tdLiBUaGlzIGZ1bmN0aW9uIHdpbGwgZGVsZWdhdGUgdG9cbiAgICogW1pvbmUucnVuVGFza10gYW5kIGRlbGVnYXRlIHRvIGBjYWxsYmFja2AuXG4gICAqL1xuICBpbnZva2U6IEZ1bmN0aW9uO1xuXG4gIC8qKlxuICAgKiBGdW5jdGlvbiB3aGljaCBuZWVkcyB0byBiZSBleGVjdXRlZCBieSB0aGUgVGFzayBhZnRlciB0aGUgW1pvbmUuY3VycmVudFRhc2tdIGhhcyBiZWVuIHNldCB0b1xuICAgKiB0aGUgY3VycmVudCB0YXNrLlxuICAgKi9cbiAgY2FsbGJhY2s6IEZ1bmN0aW9uO1xuXG4gIC8qKlxuICAgKiBUYXNrIHNwZWNpZmljIG9wdGlvbnMgYXNzb2NpYXRlZCB3aXRoIHRoZSBjdXJyZW50IHRhc2suIFRoaXMgaXMgcGFzc2VkIHRvIHRoZSBgc2NoZWR1bGVGbmAuXG4gICAqL1xuICBkYXRhOiBUYXNrRGF0YTtcblxuICAvKipcbiAgICogUmVwcmVzZW50cyB0aGUgZGVmYXVsdCB3b3JrIHdoaWNoIG5lZWRzIHRvIGJlIGRvbmUgdG8gc2NoZWR1bGUgdGhlIFRhc2sgYnkgdGhlIFZNLlxuICAgKlxuICAgKiBBIHpvbmUgbWF5IGNob3NlIHRvIGludGVyY2VwdCB0aGlzIGZ1bmN0aW9uIGFuZCBwZXJmb3JtIGl0cyBvd24gc2NoZWR1bGluZy5cbiAgICovXG4gIHNjaGVkdWxlRm46ICh0YXNrOiBUYXNrKSA9PiB2b2lkO1xuXG4gIC8qKlxuICAgKiBSZXByZXNlbnRzIHRoZSBkZWZhdWx0IHdvcmsgd2hpY2ggbmVlZHMgdG8gYmUgZG9uZSB0byB1bi1zY2hlZHVsZSB0aGUgVGFzayBmcm9tIHRoZSBWTS4gTm90IGFsbFxuICAgKiBUYXNrcyBhcmUgY2FuY2VsYWJsZSwgYW5kIHRoZXJlZm9yZSB0aGlzIG1ldGhvZCBpcyBvcHRpb25hbC5cbiAgICpcbiAgICogQSB6b25lIG1heSBjaG9zZSB0byBpbnRlcmNlcHQgdGhpcyBmdW5jdGlvbiBhbmQgcGVyZm9ybSBpdHMgb3duIHNjaGVkdWxpbmcuXG4gICAqL1xuICBjYW5jZWxGbjogKHRhc2s6IFRhc2spID0+IHZvaWQ7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtab25lfSBUaGUgem9uZSB3aGljaCB3aWxsIGJlIHVzZWQgdG8gaW52b2tlIHRoZSBgY2FsbGJhY2tgLiBUaGUgWm9uZSBpcyBjYXB0dXJlZFxuICAgKiBhdCB0aGUgdGltZSBvZiBUYXNrIGNyZWF0aW9uLlxuICAgKi9cbiAgem9uZTogWm9uZTtcbn1cblxuaW50ZXJmYWNlIE1pY3JvVGFzayBleHRlbmRzIFRhc2sge1xuICAvKiBUUyB2MS44ID0+IHR5cGU6ICdtaWNyb1Rhc2snOyAqL1xufVxuXG5pbnRlcmZhY2UgTWFjcm9UYXNrIGV4dGVuZHMgVGFzayB7XG4gIC8qIFRTIHYxLjggPT4gdHlwZTogJ21hY3JvVGFzayc7ICovXG59XG5cbmludGVyZmFjZSBFdmVudFRhc2sgZXh0ZW5kcyBUYXNrIHtcbiAgLyogVFMgdjEuOCA9PiB0eXBlOiAnZXZlbnRUYXNrJzsgKi9cbn1cblxuLyoqIEBpbnRlcm5hbCAqL1xudHlwZSBBbWJpZW50Wm9uZSA9IFpvbmU7XG4vKiogQGludGVybmFsICovXG50eXBlIEFtYmllbnRab25lRGVsZWdhdGUgPSBab25lRGVsZWdhdGU7XG5cbnZhciBab25lOiBab25lVHlwZSA9IChmdW5jdGlvbihnbG9iYWwpIHtcbiAgY2xhc3MgWm9uZSBpbXBsZW1lbnRzIEFtYmllbnRab25lIHtcbiAgICBzdGF0aWMgX19zeW1ib2xfXzogKG5hbWU6IHN0cmluZykgPT4gc3RyaW5nID0gX19zeW1ib2xfXztcblxuXG4gICAgc3RhdGljIGdldCBjdXJyZW50KCk6IEFtYmllbnRab25lIHsgcmV0dXJuIF9jdXJyZW50Wm9uZTsgfTtcbiAgICBzdGF0aWMgZ2V0IGN1cnJlbnRUYXNrKCk6IFRhc2sgeyByZXR1cm4gX2N1cnJlbnRUYXNrOyB9O1xuXG4gICAgcHVibGljIGdldCBwYXJlbnQoKTogQW1iaWVudFpvbmUgeyByZXR1cm4gdGhpcy5fcGFyZW50OyB9O1xuICAgIHB1YmxpYyBnZXQgbmFtZSgpOiBzdHJpbmcgeyByZXR1cm4gdGhpcy5fbmFtZTsgfTtcblxuXG4gICAgcHJpdmF0ZSBfcGFyZW50OiBab25lO1xuICAgIHByaXZhdGUgX25hbWU6IHN0cmluZztcbiAgICBwcml2YXRlIF9wcm9wZXJ0aWVzOiB7W2tleTogc3RyaW5nXTogYW55fSA9IG51bGw7XG4gICAgcHJpdmF0ZSBfem9uZURlbGVnYXRlOiBab25lRGVsZWdhdGU7XG5cbiAgICBjb25zdHJ1Y3RvcihwYXJlbnQ6IFpvbmUsIHpvbmVTcGVjOiBab25lU3BlYylcbiAgICB7XG4gICAgICB0aGlzLl9wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICB0aGlzLl9uYW1lID0gem9uZVNwZWMgPyB6b25lU3BlYy5uYW1lIHx8ICd1bm5hbWVkJyA6ICc8cm9vdD4nO1xuICAgICAgdGhpcy5fcHJvcGVydGllcyA9IHpvbmVTcGVjICYmIHpvbmVTcGVjLnByb3BlcnRpZXMgfHwge307XG4gICAgICB0aGlzLl96b25lRGVsZWdhdGUgPSBuZXcgWm9uZURlbGVnYXRlKHRoaXMsIHRoaXMuX3BhcmVudCAmJiB0aGlzLl9wYXJlbnQuX3pvbmVEZWxlZ2F0ZSwgem9uZVNwZWMpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQoa2V5OiBzdHJpbmcpOiBhbnkge1xuICAgICAgdmFyIGN1cnJlbnQ6IFpvbmUgPSB0aGlzO1xuICAgICAgd2hpbGUgKGN1cnJlbnQpIHtcbiAgICAgICAgaWYgKGN1cnJlbnQuX3Byb3BlcnRpZXMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgIHJldHVybiBjdXJyZW50Ll9wcm9wZXJ0aWVzW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgY3VycmVudCA9IGN1cnJlbnQuX3BhcmVudDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgZm9yayh6b25lU3BlYzogWm9uZVNwZWMpOiBBbWJpZW50Wm9uZSB7XG4gICAgICBpZiAoIXpvbmVTcGVjKSB0aHJvdyBuZXcgRXJyb3IoJ1pvbmVTcGVjIHJlcXVpcmVkIScpO1xuICAgICAgcmV0dXJuIHRoaXMuX3pvbmVEZWxlZ2F0ZS5mb3JrKHRoaXMsIHpvbmVTcGVjKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgd3JhcChjYWxsYmFjazogRnVuY3Rpb24sIHNvdXJjZTogc3RyaW5nKTogRnVuY3Rpb25cbiAgICB7XG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RpbmcgZnVuY3Rpb24gZ290OiAnICsgY2FsbGJhY2spO1xuICAgICAgfVxuICAgICAgdmFyIGNhbGxiYWNrID0gdGhpcy5fem9uZURlbGVnYXRlLmludGVyY2VwdCh0aGlzLCBjYWxsYmFjaywgc291cmNlKTtcbiAgICAgIHZhciB6b25lOiBab25lID0gdGhpcztcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHpvbmUucnVuR3VhcmRlZChjYWxsYmFjaywgdGhpcywgPGFueT5hcmd1bWVudHMsIHNvdXJjZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIHJ1bihjYWxsYmFjazogRnVuY3Rpb24sIGFwcGx5VGhpczogYW55ID0gbnVsbCwgYXBwbHlBcmdzOiBhbnlbXSA9IG51bGwsXG4gICAgICAgICAgICAgICBzb3VyY2U6IHN0cmluZyA9IG51bGwpXG4gICAge1xuICAgICAgdmFyIG9sZFpvbmUgPSBfY3VycmVudFpvbmU7XG4gICAgICBfY3VycmVudFpvbmUgPSB0aGlzO1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3pvbmVEZWxlZ2F0ZS5pbnZva2UodGhpcywgY2FsbGJhY2ssIGFwcGx5VGhpcywgYXBwbHlBcmdzLCBzb3VyY2UpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgX2N1cnJlbnRab25lID0gb2xkWm9uZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgcnVuR3VhcmRlZChjYWxsYmFjazogRnVuY3Rpb24sIGFwcGx5VGhpczogYW55ID0gbnVsbCwgYXBwbHlBcmdzOiBhbnlbXSA9IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgc291cmNlOiBzdHJpbmcgPSBudWxsKVxuICAgIHtcbiAgICAgIHZhciBvbGRab25lID0gX2N1cnJlbnRab25lO1xuICAgICAgX2N1cnJlbnRab25lID0gdGhpcztcbiAgICAgIHRyeSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX3pvbmVEZWxlZ2F0ZS5pbnZva2UodGhpcywgY2FsbGJhY2ssIGFwcGx5VGhpcywgYXBwbHlBcmdzLCBzb3VyY2UpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGlmICh0aGlzLl96b25lRGVsZWdhdGUuaGFuZGxlRXJyb3IodGhpcywgZXJyb3IpKSB7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIF9jdXJyZW50Wm9uZSA9IG9sZFpvbmU7XG4gICAgICB9XG4gICAgfVxuXG5cbiAgICBydW5UYXNrKHRhc2s6IFRhc2ssIGFwcGx5VGhpcz86IGFueSwgYXBwbHlBcmdzPzogYW55KSB7XG4gICAgICBpZiAodGFzay56b25lICE9IHRoaXMpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQSB0YXNrIGNhbiBvbmx5IGJlIHJ1biBpbiB0aGUgem9uZSB3aGljaCBjcmVhdGVkIGl0ISAoQ3JlYXRpb246ICcgK1xuICAgICAgICAgICAgdGFzay56b25lLm5hbWUgKyAnOyBFeGVjdXRpb246ICcgKyB0aGlzLm5hbWUgKyAnKScpO1xuICAgICAgdmFyIHByZXZpb3VzVGFzayA9IF9jdXJyZW50VGFzaztcbiAgICAgIF9jdXJyZW50VGFzayA9IHRhc2s7XG4gICAgICB2YXIgb2xkWm9uZSA9IF9jdXJyZW50Wm9uZTtcbiAgICAgIF9jdXJyZW50Wm9uZSA9IHRoaXM7XG4gICAgICB0cnkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiB0aGlzLl96b25lRGVsZWdhdGUuaW52b2tlVGFzayh0aGlzLCB0YXNrLCBhcHBseVRoaXMsIGFwcGx5QXJncyk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgaWYgKHRoaXMuX3pvbmVEZWxlZ2F0ZS5oYW5kbGVFcnJvcih0aGlzLCBlcnJvcikpIHtcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgaWYgKHRhc2sudHlwZSA9PSAnbWFjcm9UYXNrJyAmJiB0YXNrLmRhdGEgJiYgIXRhc2suZGF0YS5pc1BlcmlvZGljKSB7XG4gICAgICAgICAgdGFzay5jYW5jZWxGbiA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgX2N1cnJlbnRab25lID0gb2xkWm9uZTtcbiAgICAgICAgX2N1cnJlbnRUYXNrID0gcHJldmlvdXNUYXNrO1xuICAgICAgfVxuICAgIH1cblxuXG4gICAgc2NoZWR1bGVNaWNyb1Rhc2soc291cmNlOiBzdHJpbmcsIGNhbGxiYWNrOiBGdW5jdGlvbiwgZGF0YT86IFRhc2tEYXRhLFxuICAgICAgICAgICAgICAgICAgICAgIGN1c3RvbVNjaGVkdWxlPzogKHRhc2s6IFRhc2spID0+IHZvaWQpOiBNaWNyb1Rhc2sge1xuICAgICAgcmV0dXJuIDxNaWNyb1Rhc2s+dGhpcy5fem9uZURlbGVnYXRlLnNjaGVkdWxlVGFzayh0aGlzLFxuICAgICAgICAgIG5ldyBab25lVGFzaygnbWljcm9UYXNrJywgdGhpcywgc291cmNlLCBjYWxsYmFjaywgZGF0YSwgY3VzdG9tU2NoZWR1bGUsIG51bGwpKTtcbiAgICB9XG5cbiAgICBzY2hlZHVsZU1hY3JvVGFzayhzb3VyY2U6IHN0cmluZywgY2FsbGJhY2s6IEZ1bmN0aW9uLCBkYXRhOiBUYXNrRGF0YSxcbiAgICAgICAgICAgICAgICAgICAgICBjdXN0b21TY2hlZHVsZTogKHRhc2s6IFRhc2spID0+IHZvaWQsXG4gICAgICAgICAgICAgICAgICAgICAgY3VzdG9tQ2FuY2VsOiAodGFzazogVGFzaykgPT4gdm9pZCk6IE1hY3JvVGFzayB7XG4gICAgICByZXR1cm4gPE1hY3JvVGFzaz50aGlzLl96b25lRGVsZWdhdGUuc2NoZWR1bGVUYXNrKHRoaXMsXG4gICAgICAgICAgbmV3IFpvbmVUYXNrKCdtYWNyb1Rhc2snLCB0aGlzLCBzb3VyY2UsIGNhbGxiYWNrLCBkYXRhLCBjdXN0b21TY2hlZHVsZSwgY3VzdG9tQ2FuY2VsKSk7XG4gICAgfVxuXG4gICAgc2NoZWR1bGVFdmVudFRhc2soc291cmNlOiBzdHJpbmcsIGNhbGxiYWNrOiBGdW5jdGlvbiwgZGF0YTogVGFza0RhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgY3VzdG9tU2NoZWR1bGU6ICh0YXNrOiBUYXNrKSA9PiB2b2lkLFxuICAgICAgICAgICAgICAgICAgICAgIGN1c3RvbUNhbmNlbDogKHRhc2s6IFRhc2spID0+IHZvaWQpOiBFdmVudFRhc2sge1xuICAgICAgcmV0dXJuIDxFdmVudFRhc2s+dGhpcy5fem9uZURlbGVnYXRlLnNjaGVkdWxlVGFzayh0aGlzLFxuICAgICAgICAgIG5ldyBab25lVGFzaygnZXZlbnRUYXNrJywgdGhpcywgc291cmNlLCBjYWxsYmFjaywgZGF0YSwgY3VzdG9tU2NoZWR1bGUsIGN1c3RvbUNhbmNlbCkpO1xuICAgIH1cblxuICAgIGNhbmNlbFRhc2sodGFzazogVGFzayk6IGFueSB7XG4gICAgICB2YXIgdmFsdWUgPSB0aGlzLl96b25lRGVsZWdhdGUuY2FuY2VsVGFzayh0aGlzLCB0YXNrKTtcbiAgICAgIHRhc2suY2FuY2VsRm4gPSBudWxsO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgfTtcblxuICBjbGFzcyBab25lRGVsZWdhdGUgaW1wbGVtZW50cyBBbWJpZW50Wm9uZURlbGVnYXRlIHtcbiAgICBwdWJsaWMgem9uZTogWm9uZTtcblxuICAgIHByaXZhdGUgX3Rhc2tDb3VudHM6IHttaWNyb1Rhc2s6IG51bWJlciwgbWFjcm9UYXNrOiBudW1iZXIsIGV2ZW50VGFzazogbnVtYmVyfVxuICAgICAgICA9IHttaWNyb1Rhc2s6IDAsIG1hY3JvVGFzazogMCwgZXZlbnRUYXNrOiAwfTtcblxuICAgIHByaXZhdGUgX3BhcmVudERlbGVnYXRlOiBab25lRGVsZWdhdGU7XG5cbiAgICBwcml2YXRlIF9mb3JrRGxndDogWm9uZURlbGVnYXRlO1xuICAgIHByaXZhdGUgX2ZvcmtaUzogWm9uZVNwZWM7XG5cbiAgICBwcml2YXRlIF9pbnRlcmNlcHREbGd0OiBab25lRGVsZWdhdGU7XG4gICAgcHJpdmF0ZSBfaW50ZXJjZXB0WlM6IFpvbmVTcGVjO1xuXG4gICAgcHJpdmF0ZSBfaW52b2tlRGxndDogWm9uZURlbGVnYXRlO1xuICAgIHByaXZhdGUgX2ludm9rZVpTOiBab25lU3BlYztcblxuICAgIHByaXZhdGUgX2hhbmRsZUVycm9yRGxndDogWm9uZURlbGVnYXRlO1xuICAgIHByaXZhdGUgX2hhbmRsZUVycm9yWlM6IFpvbmVTcGVjO1xuXG4gICAgcHJpdmF0ZSBfc2NoZWR1bGVUYXNrRGxndDogWm9uZURlbGVnYXRlO1xuICAgIHByaXZhdGUgX3NjaGVkdWxlVGFza1pTOiBab25lU3BlYztcblxuICAgIHByaXZhdGUgX2ludm9rZVRhc2tEbGd0OiBab25lRGVsZWdhdGU7XG4gICAgcHJpdmF0ZSBfaW52b2tlVGFza1pTOiBab25lU3BlYztcblxuICAgIHByaXZhdGUgX2NhbmNlbFRhc2tEbGd0OiBab25lRGVsZWdhdGU7XG4gICAgcHJpdmF0ZSBfY2FuY2VsVGFza1pTOiBab25lU3BlYztcblxuICAgIHByaXZhdGUgX2hhc1Rhc2tEbGd0OiBab25lRGVsZWdhdGU7XG4gICAgcHJpdmF0ZSBfaGFzVGFza1pTOiBab25lU3BlYztcblxuICAgIGNvbnN0cnVjdG9yKHpvbmU6IFpvbmUsIHBhcmVudERlbGVnYXRlOiBab25lRGVsZWdhdGUsIHpvbmVTcGVjOlpvbmVTcGVjKSB7XG4gICAgICB0aGlzLnpvbmUgPSB6b25lO1xuICAgICAgdGhpcy5fcGFyZW50RGVsZWdhdGUgPSBwYXJlbnREZWxlZ2F0ZTtcblxuICAgICAgdGhpcy5fZm9ya1pTID0gem9uZVNwZWMgJiYgKHpvbmVTcGVjICYmIHpvbmVTcGVjLm9uRm9yayA/IHpvbmVTcGVjIDogcGFyZW50RGVsZWdhdGUuX2ZvcmtaUyk7XG4gICAgICB0aGlzLl9mb3JrRGxndCA9IHpvbmVTcGVjICYmICh6b25lU3BlYy5vbkZvcmsgPyBwYXJlbnREZWxlZ2F0ZSA6IHBhcmVudERlbGVnYXRlLl9mb3JrRGxndCk7XG5cbiAgICAgIHRoaXMuX2ludGVyY2VwdFpTID0gem9uZVNwZWMgJiYgKHpvbmVTcGVjLm9uSW50ZXJjZXB0ID8gem9uZVNwZWMgOiBwYXJlbnREZWxlZ2F0ZS5faW50ZXJjZXB0WlMpO1xuICAgICAgdGhpcy5faW50ZXJjZXB0RGxndCA9IHpvbmVTcGVjICYmICh6b25lU3BlYy5vbkludGVyY2VwdCA/IHBhcmVudERlbGVnYXRlIDogcGFyZW50RGVsZWdhdGUuX2ludGVyY2VwdERsZ3QpO1xuXG4gICAgICB0aGlzLl9pbnZva2VaUyA9IHpvbmVTcGVjICYmICh6b25lU3BlYy5vbkludm9rZSA/IHpvbmVTcGVjIDogcGFyZW50RGVsZWdhdGUuX2ludm9rZVpTKTtcbiAgICAgIHRoaXMuX2ludm9rZURsZ3QgPSB6b25lU3BlYyAmJiAoem9uZVNwZWMub25JbnZva2UgPyBwYXJlbnREZWxlZ2F0ZSA6IHBhcmVudERlbGVnYXRlLl9pbnZva2VEbGd0KTtcblxuICAgICAgdGhpcy5faGFuZGxlRXJyb3JaUyA9IHpvbmVTcGVjICYmICh6b25lU3BlYy5vbkhhbmRsZUVycm9yID8gem9uZVNwZWMgOiBwYXJlbnREZWxlZ2F0ZS5faGFuZGxlRXJyb3JaUyk7XG4gICAgICB0aGlzLl9oYW5kbGVFcnJvckRsZ3QgPSB6b25lU3BlYyAmJiAoem9uZVNwZWMub25IYW5kbGVFcnJvciA/IHBhcmVudERlbGVnYXRlIDogcGFyZW50RGVsZWdhdGUuX2hhbmRsZUVycm9yRGxndCk7XG5cbiAgICAgIHRoaXMuX3NjaGVkdWxlVGFza1pTID0gem9uZVNwZWMgJiYgKHpvbmVTcGVjLm9uU2NoZWR1bGVUYXNrID8gem9uZVNwZWMgOiBwYXJlbnREZWxlZ2F0ZS5fc2NoZWR1bGVUYXNrWlMpO1xuICAgICAgdGhpcy5fc2NoZWR1bGVUYXNrRGxndCA9IHpvbmVTcGVjICYmICh6b25lU3BlYy5vblNjaGVkdWxlVGFzayA/IHBhcmVudERlbGVnYXRlIDogcGFyZW50RGVsZWdhdGUuX3NjaGVkdWxlVGFza0RsZ3QpO1xuXG4gICAgICB0aGlzLl9pbnZva2VUYXNrWlMgPSB6b25lU3BlYyAmJiAoem9uZVNwZWMub25JbnZva2VUYXNrID8gem9uZVNwZWMgOiBwYXJlbnREZWxlZ2F0ZS5faW52b2tlVGFza1pTKTtcbiAgICAgIHRoaXMuX2ludm9rZVRhc2tEbGd0ID0gem9uZVNwZWMgJiYgKHpvbmVTcGVjLm9uSW52b2tlVGFzayA/IHBhcmVudERlbGVnYXRlIDogcGFyZW50RGVsZWdhdGUuX2ludm9rZVRhc2tEbGd0KTtcblxuICAgICAgdGhpcy5fY2FuY2VsVGFza1pTID0gem9uZVNwZWMgJiYgKHpvbmVTcGVjLm9uQ2FuY2VsVGFzayA/IHpvbmVTcGVjIDogcGFyZW50RGVsZWdhdGUuX2NhbmNlbFRhc2taUyk7XG4gICAgICB0aGlzLl9jYW5jZWxUYXNrRGxndCA9IHpvbmVTcGVjICYmICh6b25lU3BlYy5vbkNhbmNlbFRhc2sgPyBwYXJlbnREZWxlZ2F0ZSA6IHBhcmVudERlbGVnYXRlLl9jYW5jZWxUYXNrRGxndCk7XG5cbiAgICAgIHRoaXMuX2hhc1Rhc2taUyA9IHpvbmVTcGVjICYmICh6b25lU3BlYy5vbkhhc1Rhc2sgPyB6b25lU3BlYyA6IHBhcmVudERlbGVnYXRlLl9oYXNUYXNrWlMpO1xuICAgICAgdGhpcy5faGFzVGFza0RsZ3QgPSB6b25lU3BlYyAmJiAoem9uZVNwZWMub25IYXNUYXNrID8gcGFyZW50RGVsZWdhdGUgOiBwYXJlbnREZWxlZ2F0ZS5faGFzVGFza0RsZ3QpO1xuICAgIH1cblxuICAgIGZvcmsodGFyZ2V0Wm9uZTogWm9uZSwgem9uZVNwZWM6IFpvbmVTcGVjKTogQW1iaWVudFpvbmUge1xuICAgICAgcmV0dXJuIHRoaXMuX2ZvcmtaU1xuICAgICAgICAgID8gdGhpcy5fZm9ya1pTLm9uRm9yayh0aGlzLl9mb3JrRGxndCwgdGhpcy56b25lLCB0YXJnZXRab25lLCB6b25lU3BlYylcbiAgICAgICAgICA6IG5ldyBab25lKHRhcmdldFpvbmUsIHpvbmVTcGVjKTtcbiAgICB9XG5cbiAgICBpbnRlcmNlcHQodGFyZ2V0Wm9uZTogWm9uZSwgY2FsbGJhY2s6IEZ1bmN0aW9uLCBzb3VyY2U6IHN0cmluZyk6IEZ1bmN0aW9uIHtcbiAgICAgIHJldHVybiB0aGlzLl9pbnRlcmNlcHRaU1xuICAgICAgICAgID8gdGhpcy5faW50ZXJjZXB0WlMub25JbnRlcmNlcHQodGhpcy5faW50ZXJjZXB0RGxndCwgdGhpcy56b25lLCB0YXJnZXRab25lLCBjYWxsYmFjaywgc291cmNlKVxuICAgICAgICAgIDogY2FsbGJhY2s7XG4gICAgfVxuXG4gICAgaW52b2tlKHRhcmdldFpvbmU6IFpvbmUsIGNhbGxiYWNrOiBGdW5jdGlvbiwgYXBwbHlUaGlzOiBhbnksIGFwcGx5QXJnczogYW55W10sXG4gICAgICAgICAgIHNvdXJjZTogc3RyaW5nKTogYW55XG4gICAge1xuICAgICAgcmV0dXJuIHRoaXMuX2ludm9rZVpTXG4gICAgICAgICAgPyB0aGlzLl9pbnZva2VaUy5vbkludm9rZSh0aGlzLl9pbnZva2VEbGd0LCB0aGlzLnpvbmUsIHRhcmdldFpvbmUsIGNhbGxiYWNrLCBhcHBseVRoaXMsIGFwcGx5QXJncywgc291cmNlKVxuICAgICAgICAgIDogY2FsbGJhY2suYXBwbHkoYXBwbHlUaGlzLCBhcHBseUFyZ3MpO1xuICAgIH1cblxuICAgIGhhbmRsZUVycm9yKHRhcmdldFpvbmU6IFpvbmUsIGVycm9yOiBhbnkpOiBib29sZWFuIHtcbiAgICAgIHJldHVybiB0aGlzLl9oYW5kbGVFcnJvclpTXG4gICAgICAgICAgPyB0aGlzLl9oYW5kbGVFcnJvclpTLm9uSGFuZGxlRXJyb3IodGhpcy5faGFuZGxlRXJyb3JEbGd0LCB0aGlzLnpvbmUsIHRhcmdldFpvbmUsIGVycm9yKVxuICAgICAgICAgIDogdHJ1ZTtcbiAgICB9XG5cbiAgICBzY2hlZHVsZVRhc2sodGFyZ2V0Wm9uZTogWm9uZSwgdGFzazogVGFzayk6IFRhc2sge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKHRoaXMuX3NjaGVkdWxlVGFza1pTKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX3NjaGVkdWxlVGFza1pTLm9uU2NoZWR1bGVUYXNrKHRoaXMuX3NjaGVkdWxlVGFza0RsZ3QsIHRoaXMuem9uZSwgdGFyZ2V0Wm9uZSwgdGFzayk7XG4gICAgICAgIH0gZWxzZSBpZiAodGFzay5zY2hlZHVsZUZuKSB7XG4gICAgICAgICAgdGFzay5zY2hlZHVsZUZuKHRhc2spXG4gICAgICAgIH0gZWxzZSBpZiAodGFzay50eXBlID09ICdtaWNyb1Rhc2snKSB7XG4gICAgICAgICAgc2NoZWR1bGVNaWNyb1Rhc2soPE1pY3JvVGFzaz50YXNrKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Rhc2sgaXMgbWlzc2luZyBzY2hlZHVsZUZuLicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YXNrO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgaWYgKHRhcmdldFpvbmUgPT0gdGhpcy56b25lKSB7XG4gICAgICAgICAgdGhpcy5fdXBkYXRlVGFza0NvdW50KHRhc2sudHlwZSwgMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpbnZva2VUYXNrKHRhcmdldFpvbmU6IFpvbmUsIHRhc2s6IFRhc2ssIGFwcGx5VGhpczogYW55LCBhcHBseUFyZ3M6IGFueSk6IGFueSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlVGFza1pTXG4gICAgICAgICAgICA/IHRoaXMuX2ludm9rZVRhc2taUy5vbkludm9rZVRhc2sodGhpcy5faW52b2tlVGFza0RsZ3QsIHRoaXMuem9uZSwgdGFyZ2V0Wm9uZSwgdGFzaywgYXBwbHlUaGlzLCBhcHBseUFyZ3MpXG4gICAgICAgICAgICA6IHRhc2suY2FsbGJhY2suYXBwbHkoYXBwbHlUaGlzLCBhcHBseUFyZ3MpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgaWYgKHRhcmdldFpvbmUgPT0gdGhpcy56b25lICYmICh0YXNrLnR5cGUgIT0gJ2V2ZW50VGFzaycpICYmICEodGFzay5kYXRhICYmIHRhc2suZGF0YS5pc1BlcmlvZGljKSkge1xuICAgICAgICAgIHRoaXMuX3VwZGF0ZVRhc2tDb3VudCh0YXNrLnR5cGUsIC0xKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGNhbmNlbFRhc2sodGFyZ2V0Wm9uZTogWm9uZSwgdGFzazogVGFzayk6IGFueSB7XG4gICAgICB2YXIgdmFsdWU7XG4gICAgICBpZiAodGhpcy5fY2FuY2VsVGFza1pTKSB7XG4gICAgICAgIHZhbHVlID0gIHRoaXMuX2NhbmNlbFRhc2taUy5vbkNhbmNlbFRhc2sodGhpcy5fY2FuY2VsVGFza0RsZ3QsIHRoaXMuem9uZSwgdGFyZ2V0Wm9uZSwgdGFzayk7XG4gICAgICB9IGVsc2UgIGlmICghdGFzay5jYW5jZWxGbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Rhc2sgZG9lcyBub3Qgc3VwcG9ydCBjYW5jZWxsYXRpb24sIG9yIGlzIGFscmVhZHkgY2FuY2VsZWQuJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZSA9IHRhc2suY2FuY2VsRm4odGFzaylcbiAgICAgIH1cbiAgICAgIGlmICh0YXJnZXRab25lID09IHRoaXMuem9uZSkge1xuICAgICAgICAvLyB0aGlzIHNob3VsZCBub3QgYmUgaW4gdGhlIGZpbmFsbHkgYmxvY2ssIGJlY2F1c2UgZXhjZXB0aW9ucyBhc3N1bWUgbm90IGNhbmNlbGVkLlxuICAgICAgICB0aGlzLl91cGRhdGVUYXNrQ291bnQodGFzay50eXBlLCAtMSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgaGFzVGFzayh0YXJnZXRab25lOiBab25lLCBpc0VtcHR5OiBIYXNUYXNrU3RhdGUpIHtcbiAgICAgIHJldHVybiB0aGlzLl9oYXNUYXNrWlMgJiYgdGhpcy5faGFzVGFza1pTLm9uSGFzVGFzayh0aGlzLl9oYXNUYXNrRGxndCwgdGhpcy56b25lLCB0YXJnZXRab25lLFxuICAgICAgICAgIGlzRW1wdHkpO1xuICAgIH1cblxuICAgIHByaXZhdGUgX3VwZGF0ZVRhc2tDb3VudCh0eXBlOiBUYXNrVHlwZSwgY291bnQ6IG51bWJlcikge1xuICAgICAgdmFyIGNvdW50cyA9IHRoaXMuX3Rhc2tDb3VudHM7XG4gICAgICB2YXIgcHJldiA9IGNvdW50c1t0eXBlXTtcbiAgICAgIHZhciBuZXh0ID0gY291bnRzW3R5cGVdID0gcHJldiArIGNvdW50O1xuICAgICAgaWYgKG5leHQgPCAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTW9yZSB0YXNrcyBleGVjdXRlZCB0aGVuIHdlcmUgc2NoZWR1bGVkLicpO1xuICAgICAgfVxuICAgICAgaWYgKHByZXYgPT0gMCB8fCBuZXh0ID09IDApIHtcbiAgICAgICAgdmFyIGlzRW1wdHk6IEhhc1Rhc2tTdGF0ZSA9IHtcbiAgICAgICAgICBtaWNyb1Rhc2s6IGNvdW50cy5taWNyb1Rhc2sgPiAwLFxuICAgICAgICAgIG1hY3JvVGFzazogY291bnRzLm1hY3JvVGFzayA+IDAsXG4gICAgICAgICAgZXZlbnRUYXNrOiBjb3VudHMuZXZlbnRUYXNrID4gMCxcbiAgICAgICAgICBjaGFuZ2U6IHR5cGVcbiAgICAgICAgfTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGlzLmhhc1Rhc2sodGhpcy56b25lLCBpc0VtcHR5KTtcbiAgICAgICAgfSBmaW5hbGx5ICB7XG4gICAgICAgICAgaWYgKHRoaXMuX3BhcmVudERlbGVnYXRlKSB7XG4gICAgICAgICAgICB0aGlzLl9wYXJlbnREZWxlZ2F0ZS5fdXBkYXRlVGFza0NvdW50KHR5cGUsIGNvdW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuXG4gIGNsYXNzIFpvbmVUYXNrIGltcGxlbWVudHMgVGFzayB7XG4gICAgcHVibGljIHR5cGU6IFRhc2tUeXBlO1xuICAgIHB1YmxpYyBzb3VyY2U6IHN0cmluZztcbiAgICBwdWJsaWMgaW52b2tlOiBGdW5jdGlvbjtcbiAgICBwdWJsaWMgY2FsbGJhY2s6IEZ1bmN0aW9uO1xuICAgIHB1YmxpYyBkYXRhOiBUYXNrRGF0YTtcbiAgICBwdWJsaWMgc2NoZWR1bGVGbjogKHRhc2s6IFRhc2spID0+IHZvaWQ7XG4gICAgcHVibGljIGNhbmNlbEZuOiAodGFzazogVGFzaykgPT4gdm9pZDtcbiAgICBwdWJsaWMgem9uZTogWm9uZTtcblxuICAgIGNvbnN0cnVjdG9yKHR5cGU6IFRhc2tUeXBlLCB6b25lOiBab25lLCBzb3VyY2U6IHN0cmluZywgY2FsbGJhY2s6IEZ1bmN0aW9uLCBvcHRpb25zOiBUYXNrRGF0YSxcbiAgICAgICAgICAgICAgICBzY2hlZHVsZUZuOiAodGFzazogVGFzaykgPT4gdm9pZCwgY2FuY2VsRm46KHRhc2s6IFRhc2spID0+IHZvaWQpXG4gICAge1xuICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICAgIHRoaXMuem9uZSA9IHpvbmU7XG4gICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgIHRoaXMuZGF0YSA9IG9wdGlvbnM7XG4gICAgICB0aGlzLnNjaGVkdWxlRm4gPSBzY2hlZHVsZUZuO1xuICAgICAgdGhpcy5jYW5jZWxGbiA9IGNhbmNlbEZuO1xuICAgICAgdGhpcy5jYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgdGhpcy5pbnZva2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIHpvbmUucnVuVGFzayhzZWxmLCB0aGlzLCA8YW55PmFyZ3VtZW50cyk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgZHJhaW5NaWNyb1Rhc2tRdWV1ZSgpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIGludGVyZmFjZSBVbmNhdWdodFByb21pc2VFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICB6b25lOiBBbWJpZW50Wm9uZTtcbiAgICB0YXNrOiBUYXNrO1xuICAgIHByb21pc2U6IFpvbmVBd2FyZVByb21pc2U8YW55PjtcbiAgICByZWplY3Rpb246IGFueTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9fc3ltYm9sX18obmFtZTogc3RyaW5nKSB7IHJldHVybiAnX196b25lX3N5bWJvbF9fJyArIG5hbWU7IH07XG4gIGNvbnN0IHN5bWJvbFNldFRpbWVvdXQgPSBfX3N5bWJvbF9fKCdzZXRUaW1lb3V0Jyk7XG4gIGNvbnN0IHN5bWJvbFByb21pc2UgPSBfX3N5bWJvbF9fKCdQcm9taXNlJyk7XG4gIGNvbnN0IHN5bWJvbFRoZW4gPSBfX3N5bWJvbF9fKCd0aGVuJyk7XG5cbiAgdmFyIF9jdXJyZW50Wm9uZTogWm9uZSA9IG5ldyBab25lKG51bGwsIG51bGwpO1xuICB2YXIgX2N1cnJlbnRUYXNrOiBUYXNrID0gbnVsbDtcbiAgdmFyIF9taWNyb1Rhc2tRdWV1ZTogVGFza1tdID0gW107XG4gIHZhciBfaXNEcmFpbmluZ01pY3JvdGFza1F1ZXVlOiBib29sZWFuID0gZmFsc2U7XG4gIHZhciBfdW5jYXVnaHRQcm9taXNlRXJyb3JzOiBVbmNhdWdodFByb21pc2VFcnJvcltdID0gW107XG4gIHZhciBfZHJhaW5TY2hlZHVsZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICBmdW5jdGlvbiBzY2hlZHVsZVF1ZXVlRHJhaW4oKSB7XG4gICAgaWYgKCFfZHJhaW5TY2hlZHVsZWQgJiYgIV9jdXJyZW50VGFzayAmJiBfbWljcm9UYXNrUXVldWUubGVuZ3RoID09IDApIHtcbiAgICAgIC8vIFdlIGFyZSBub3QgcnVubmluZyBpbiBUYXNrLCBzbyB3ZSBuZWVkIHRvIGtpY2tzdGFydCB0aGUgbWljcm90YXNrIHF1ZXVlLlxuICAgICAgaWYgKGdsb2JhbFtzeW1ib2xQcm9taXNlXSkge1xuICAgICAgICBnbG9iYWxbc3ltYm9sUHJvbWlzZV0ucmVzb2x2ZSgwKVtzeW1ib2xUaGVuXShkcmFpbk1pY3JvVGFza1F1ZXVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGdsb2JhbFtzeW1ib2xTZXRUaW1lb3V0XShkcmFpbk1pY3JvVGFza1F1ZXVlLCAwKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzY2hlZHVsZU1pY3JvVGFzayh0YXNrOiBNaWNyb1Rhc2spIHtcbiAgICBzY2hlZHVsZVF1ZXVlRHJhaW4oKTtcbiAgICBfbWljcm9UYXNrUXVldWUucHVzaCh0YXNrKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbnNvbGVFcnJvcihlOmFueSkge1xuICAgIHZhciByZWplY3Rpb24gPSBlICYmIGUucmVqZWN0aW9uO1xuICAgIGlmIChyZWplY3Rpb24pIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgJ1VuaGFuZGxlZCBQcm9taXNlIHJlamVjdGlvbjonLCByZWplY3Rpb24gaW5zdGFuY2VvZiBFcnJvciA/IHJlamVjdGlvbi5tZXNzYWdlIDogcmVqZWN0aW9uLFxuICAgICAgICAgICc7IFpvbmU6JywgKDxab25lPmUuem9uZSkubmFtZSxcbiAgICAgICAgICAnOyBUYXNrOicsIGUudGFzayAmJiAoPFRhc2s+ZS50YXNrKS5zb3VyY2UsXG4gICAgICAgICAgJzsgVmFsdWU6JywgcmVqZWN0aW9uXG4gICAgICApO1xuICAgIH1cbiAgICBjb25zb2xlLmVycm9yKGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gZHJhaW5NaWNyb1Rhc2tRdWV1ZSgpIHtcbiAgICBpZiAoIV9pc0RyYWluaW5nTWljcm90YXNrUXVldWUpIHtcbiAgICAgIF9pc0RyYWluaW5nTWljcm90YXNrUXVldWUgPSB0cnVlO1xuICAgICAgd2hpbGUoX21pY3JvVGFza1F1ZXVlLmxlbmd0aCkge1xuICAgICAgICB2YXIgcXVldWUgPSBfbWljcm9UYXNrUXVldWU7XG4gICAgICAgIF9taWNyb1Rhc2tRdWV1ZSA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdmFyIHRhc2sgPSBxdWV1ZVtpXTtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGFzay56b25lLnJ1blRhc2sodGFzaywgbnVsbCwgbnVsbCk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY29uc29sZUVycm9yKGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgd2hpbGUoX3VuY2F1Z2h0UHJvbWlzZUVycm9ycy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIHVuY2F1Z2h0UHJvbWlzZUVycm9ycyA9IF91bmNhdWdodFByb21pc2VFcnJvcnM7XG4gICAgICAgIF91bmNhdWdodFByb21pc2VFcnJvcnMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB1bmNhdWdodFByb21pc2VFcnJvcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2YXIgdW5jYXVnaHRQcm9taXNlRXJyb3I6IFVuY2F1Z2h0UHJvbWlzZUVycm9yID0gdW5jYXVnaHRQcm9taXNlRXJyb3JzW2ldO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB1bmNhdWdodFByb21pc2VFcnJvci56b25lLnJ1bkd1YXJkZWQoKCkgPT4geyB0aHJvdyB1bmNhdWdodFByb21pc2VFcnJvcjsgfSk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY29uc29sZUVycm9yKGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgX2lzRHJhaW5pbmdNaWNyb3Rhc2tRdWV1ZSA9IGZhbHNlO1xuICAgICAgX2RyYWluU2NoZWR1bGVkID0gZmFsc2U7XG4gICAgfVxuICB9XG5cblxuICBmdW5jdGlvbiBpc1RoZW5hYmxlKHZhbHVlOiBhbnkpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdmFsdWUgJiYgdmFsdWUudGhlbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcndhcmRSZXNvbHV0aW9uKHZhbHVlOiBhbnkpOiBhbnkgeyByZXR1cm4gdmFsdWU7IH1cblxuICBmdW5jdGlvbiBmb3J3YXJkUmVqZWN0aW9uKHJlamVjdGlvbjogYW55KTogYW55IHsgcmV0dXJuIFpvbmVBd2FyZVByb21pc2UucmVqZWN0KHJlamVjdGlvbik7IH1cblxuICBjb25zdCBzeW1ib2xTdGF0ZTogc3RyaW5nID0gX19zeW1ib2xfXygnc3RhdGUnKTtcbiAgY29uc3Qgc3ltYm9sVmFsdWU6IHN0cmluZyA9IF9fc3ltYm9sX18oJ3ZhbHVlJyk7XG4gIGNvbnN0IHNvdXJjZTogc3RyaW5nID0gJ1Byb21pc2UudGhlbic7XG4gIGNvbnN0IFVOUkVTT0xWRUQgPSBudWxsO1xuICBjb25zdCBSRVNPTFZFRCA9IHRydWU7XG4gIGNvbnN0IFJFSkVDVEVEID0gZmFsc2U7XG4gIGNvbnN0IFJFSkVDVEVEX05PX0NBVENIID0gMDtcblxuICBmdW5jdGlvbiBtYWtlUmVzb2x2ZXIocHJvbWlzZTogWm9uZUF3YXJlUHJvbWlzZTxhbnk+LCBzdGF0ZTogYm9vbGVhbik6ICh2YWx1ZTogYW55KSA9PiB2b2lkIHtcbiAgICByZXR1cm4gKHYpID0+IHtcbiAgICAgIHJlc29sdmVQcm9taXNlKHByb21pc2UsIHN0YXRlLCB2KTtcbiAgICAgIC8vIERvIG5vdCByZXR1cm4gdmFsdWUgb3IgeW91IHdpbGwgYnJlYWsgdGhlIFByb21pc2Ugc3BlYy5cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZXNvbHZlUHJvbWlzZShwcm9taXNlOiBab25lQXdhcmVQcm9taXNlPGFueT4sIHN0YXRlOiBib29sZWFuLCB2YWx1ZTogYW55KTogWm9uZUF3YXJlUHJvbWlzZTxhbnk+IHtcbiAgICBpZiAocHJvbWlzZVtzeW1ib2xTdGF0ZV0gPT09IFVOUkVTT0xWRUQpIHtcbiAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFpvbmVBd2FyZVByb21pc2UgJiYgdmFsdWVbc3ltYm9sU3RhdGVdICE9PSBVTlJFU09MVkVEKSB7XG4gICAgICAgIGNsZWFyUmVqZWN0ZWROb0NhdGNoKDxQcm9taXNlPGFueT4+dmFsdWUpO1xuICAgICAgICByZXNvbHZlUHJvbWlzZShwcm9taXNlLCB2YWx1ZVtzeW1ib2xTdGF0ZV0sIHZhbHVlW3N5bWJvbFZhbHVlXSk7XG4gICAgICB9IGVsc2UgaWYgKGlzVGhlbmFibGUodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlLnRoZW4obWFrZVJlc29sdmVyKHByb21pc2UsIHN0YXRlKSwgbWFrZVJlc29sdmVyKHByb21pc2UsIGZhbHNlKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9taXNlW3N5bWJvbFN0YXRlXSA9IHN0YXRlO1xuICAgICAgICB2YXIgcXVldWUgPSBwcm9taXNlW3N5bWJvbFZhbHVlXTtcbiAgICAgICAgcHJvbWlzZVtzeW1ib2xWYWx1ZV0gPSB2YWx1ZTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDspIHtcbiAgICAgICAgICBzY2hlZHVsZVJlc29sdmVPclJlamVjdChwcm9taXNlLCBxdWV1ZVtpKytdLCBxdWV1ZVtpKytdLCBxdWV1ZVtpKytdLCBxdWV1ZVtpKytdKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocXVldWUubGVuZ3RoID09IDAgJiYgc3RhdGUgPT0gUkVKRUNURUQpIHtcbiAgICAgICAgICBwcm9taXNlW3N5bWJvbFN0YXRlXSA9IFJFSkVDVEVEX05PX0NBVENIO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmNhdWdodCAoaW4gcHJvbWlzZSk6IFwiICsgIHZhbHVlKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICB2YXIgZXJyb3I6IFVuY2F1Z2h0UHJvbWlzZUVycm9yID0gZTtcbiAgICAgICAgICAgIGVycm9yLnJlamVjdGlvbiA9IHZhbHVlO1xuICAgICAgICAgICAgZXJyb3IucHJvbWlzZSA9IHByb21pc2U7XG4gICAgICAgICAgICBlcnJvci56b25lID0gWm9uZS5jdXJyZW50O1xuICAgICAgICAgICAgZXJyb3IudGFzayA9IFpvbmUuY3VycmVudFRhc2s7XG4gICAgICAgICAgICBfdW5jYXVnaHRQcm9taXNlRXJyb3JzLnB1c2goZXJyb3IpO1xuICAgICAgICAgICAgc2NoZWR1bGVRdWV1ZURyYWluKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIC8vIFJlc29sdmluZyBhbiBhbHJlYWR5IHJlc29sdmVkIHByb21pc2UgaXMgYSBub29wLlxuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG5cbiAgZnVuY3Rpb24gY2xlYXJSZWplY3RlZE5vQ2F0Y2gocHJvbWlzZTogWm9uZUF3YXJlUHJvbWlzZTxhbnk+KTogdm9pZCB7XG4gICAgaWYgKHByb21pc2Vbc3ltYm9sU3RhdGVdID09PSBSRUpFQ1RFRF9OT19DQVRDSCkge1xuICAgICAgcHJvbWlzZVtzeW1ib2xTdGF0ZV0gPSBSRUpFQ1RFRDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgX3VuY2F1Z2h0UHJvbWlzZUVycm9ycy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAocHJvbWlzZSA9PT0gX3VuY2F1Z2h0UHJvbWlzZUVycm9yc1tpXS5wcm9taXNlKSB7XG4gICAgICAgICAgX3VuY2F1Z2h0UHJvbWlzZUVycm9ycy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuXG4gIGZ1bmN0aW9uIHNjaGVkdWxlUmVzb2x2ZU9yUmVqZWN0PFIsIFU+KHByb21pc2U6IFpvbmVBd2FyZVByb21pc2U8YW55PixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgem9uZTogQW1iaWVudFpvbmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYWluUHJvbWlzZTogWm9uZUF3YXJlUHJvbWlzZTxhbnk+LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkZ1bGZpbGxlZD86ICh2YWx1ZTogUikgPT4gVSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25SZWplY3RlZD86IChlcnJvcjogYW55KSA9PiBVKTogdm9pZFxuICB7XG4gICAgY2xlYXJSZWplY3RlZE5vQ2F0Y2gocHJvbWlzZSk7XG4gICAgdmFyIGRlbGVnYXRlID0gcHJvbWlzZVtzeW1ib2xTdGF0ZV0gPyBvbkZ1bGZpbGxlZCB8fCBmb3J3YXJkUmVzb2x1dGlvbjogb25SZWplY3RlZCB8fCBmb3J3YXJkUmVqZWN0aW9uO1xuICAgIHpvbmUuc2NoZWR1bGVNaWNyb1Rhc2soc291cmNlLCAoKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICByZXNvbHZlUHJvbWlzZShjaGFpblByb21pc2UsIHRydWUsIHpvbmUucnVuKGRlbGVnYXRlLCBudWxsLCBbcHJvbWlzZVtzeW1ib2xWYWx1ZV1dKSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICByZXNvbHZlUHJvbWlzZShjaGFpblByb21pc2UsIGZhbHNlLCBlcnJvcik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBjbGFzcyBab25lQXdhcmVQcm9taXNlPFI+IGltcGxlbWVudHMgUHJvbWlzZTxSPiB7XG4gICAgc3RhdGljIHJlc29sdmU8Uj4odmFsdWU6Uik6IFByb21pc2U8Uj4ge1xuICAgICAgcmV0dXJuIHJlc29sdmVQcm9taXNlKDxab25lQXdhcmVQcm9taXNlPFI+Pm5ldyB0aGlzKG51bGwpLCBSRVNPTFZFRCwgdmFsdWUpO1xuICAgIH1cblxuICAgIHN0YXRpYyByZWplY3Q8VT4oZXJyb3I6VSk6IFByb21pc2U8VT4ge1xuICAgICAgcmV0dXJuIHJlc29sdmVQcm9taXNlKDxab25lQXdhcmVQcm9taXNlPFU+Pm5ldyB0aGlzKG51bGwpLCBSRUpFQ1RFRCwgZXJyb3IpO1xuICAgIH1cblxuICAgIHN0YXRpYyByYWNlPFI+KHZhbHVlczogVGhlbmFibGU8YW55PltdKTogUHJvbWlzZTxSPiB7XG4gICAgICB2YXIgcmVzb2x2ZTogKHY6IGFueSkgPT4gdm9pZDtcbiAgICAgIHZhciByZWplY3Q6ICh2OiBhbnkpID0+IHZvaWQ7XG4gICAgICB2YXIgcHJvbWlzZTogYW55ID0gbmV3IHRoaXMoKHJlcywgcmVqKSA9PiB7cmVzb2x2ZSA9IHJlczsgcmVqZWN0ID0gcmVqfSk7XG4gICAgICBmdW5jdGlvbiBvblJlc29sdmUodmFsdWUpIHsgcHJvbWlzZSAmJiAocHJvbWlzZSA9IG51bGwgfHwgcmVzb2x2ZSh2YWx1ZSkpIH1cbiAgICAgIGZ1bmN0aW9uIG9uUmVqZWN0KGVycm9yKSB7IHByb21pc2UgJiYgKHByb21pc2UgPSBudWxsIHx8IHJlamVjdChlcnJvcikpIH1cblxuICAgICAgZm9yKHZhciB2YWx1ZSBvZiB2YWx1ZXMpIHtcbiAgICAgICAgaWYgKCFpc1RoZW5hYmxlKHZhbHVlKSkge1xuICAgICAgICAgIHZhbHVlID0gdGhpcy5yZXNvbHZlKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICB2YWx1ZS50aGVuKG9uUmVzb2x2ZSwgb25SZWplY3QpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfVxuXG4gICAgc3RhdGljIGFsbDxSPih2YWx1ZXMpOiBQcm9taXNlPFI+IHtcbiAgICAgIHZhciByZXNvbHZlOiAodjogYW55KSA9PiB2b2lkO1xuICAgICAgdmFyIHJlamVjdDogKHY6IGFueSkgPT4gdm9pZDtcbiAgICAgIHZhciBwcm9taXNlID0gbmV3IHRoaXMoKHJlcywgcmVqKSA9PiB7cmVzb2x2ZSA9IHJlczsgcmVqZWN0ID0gcmVqO30pO1xuICAgICAgdmFyIHJlc29sdmVkVmFsdWVzID0gW107XG4gICAgICB2YXIgY291bnQgPSAwO1xuICAgICAgZnVuY3Rpb24gb25SZWplY3QoZXJyb3IpIHsgcHJvbWlzZSAmJiByZWplY3QoZXJyb3IpOyBwcm9taXNlID0gbnVsbDsgfVxuXG4gICAgICBmb3IodmFyIHZhbHVlIG9mIHZhbHVlcykge1xuICAgICAgICBpZiAoIWlzVGhlbmFibGUodmFsdWUpKSB7XG4gICAgICAgICAgdmFsdWUgPSB0aGlzLnJlc29sdmUodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHZhbHVlLnRoZW4oKChpbmRleCkgPT4gKHZhbHVlKSA9PiB7XG4gICAgICAgICAgcmVzb2x2ZWRWYWx1ZXNbaW5kZXhdID0gdmFsdWU7XG4gICAgICAgICAgY291bnQtLTtcbiAgICAgICAgICBpZiAocHJvbWlzZSAmJiAhY291bnQpIHtcbiAgICAgICAgICAgIHJlc29sdmUocmVzb2x2ZWRWYWx1ZXMpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBwcm9taXNlID09IG51bGw7XG4gICAgICAgIH0pKGNvdW50KSwgb25SZWplY3QpO1xuICAgICAgICBjb3VudCsrO1xuICAgICAgfVxuICAgICAgaWYgKCFjb3VudCkgcmVzb2x2ZShyZXNvbHZlZFZhbHVlcyk7XG4gICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihleGVjdXRvcjogKHJlc29sdmUgOiAodmFsdWU/OiBSIHwgVGhlbmFibGU8Uj4pID0+IHZvaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3Q6IChlcnJvcj86IGFueSkgPT4gdm9pZCkgPT4gdm9pZCkge1xuICAgICAgdmFyIHByb21pc2U6IFpvbmVBd2FyZVByb21pc2U8Uj4gPSB0aGlzO1xuICAgICAgcHJvbWlzZVtzeW1ib2xTdGF0ZV0gPSBVTlJFU09MVkVEO1xuICAgICAgcHJvbWlzZVtzeW1ib2xWYWx1ZV0gPSBbXTsgLy8gcXVldWU7XG4gICAgICB0cnkge1xuICAgICAgICBleGVjdXRvciAmJiBleGVjdXRvcihtYWtlUmVzb2x2ZXIocHJvbWlzZSwgUkVTT0xWRUQpLCBtYWtlUmVzb2x2ZXIocHJvbWlzZSwgUkVKRUNURUQpKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmVzb2x2ZVByb21pc2UocHJvbWlzZSwgZmFsc2UsIGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoZW48UiwgVT4ob25GdWxmaWxsZWQ/OiAodmFsdWU6IFIpID0+IFUgfCBUaGVuYWJsZTxVPixcbiAgICAgICAgICAgICAgIG9uUmVqZWN0ZWQ/OiAoZXJyb3I6IGFueSkgPT4gVSB8IFRoZW5hYmxlPFU+KTogUHJvbWlzZTxSPlxuICAgIHtcbiAgICAgIHZhciBjaGFpblByb21pc2U6IFByb21pc2U8Uj4gPSBuZXcgWm9uZUF3YXJlUHJvbWlzZShudWxsKTtcbiAgICAgIHZhciB6b25lID0gWm9uZS5jdXJyZW50O1xuICAgICAgaWYgKHRoaXNbc3ltYm9sU3RhdGVdID09IFVOUkVTT0xWRUQgKSB7XG4gICAgICAgICg8YW55W10+dGhpc1tzeW1ib2xWYWx1ZV0pLnB1c2goem9uZSwgY2hhaW5Qcm9taXNlLCBvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzY2hlZHVsZVJlc29sdmVPclJlamVjdCh0aGlzLCB6b25lLCBjaGFpblByb21pc2UsIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjaGFpblByb21pc2U7XG4gICAgfVxuXG4gICAgY2F0Y2g8VT4ob25SZWplY3RlZD86IChlcnJvcjogYW55KSA9PiBVIHwgVGhlbmFibGU8VT4pOiBQcm9taXNlPFI+IHtcbiAgICAgIHJldHVybiB0aGlzLnRoZW4obnVsbCwgb25SZWplY3RlZCk7XG4gICAgfVxuICB9XG5cbiAgdmFyIE5hdGl2ZVByb21pc2UgPSBnbG9iYWxbX19zeW1ib2xfXygnUHJvbWlzZScpXSA9IGdsb2JhbC5Qcm9taXNlO1xuICBnbG9iYWwuUHJvbWlzZSA9IFpvbmVBd2FyZVByb21pc2U7XG4gIGlmIChOYXRpdmVQcm9taXNlKSB7XG4gICAgdmFyIE5hdGl2ZVByb21pc2VQcm90b3RvdHlwZSA9IE5hdGl2ZVByb21pc2UucHJvdG90eXBlO1xuICAgIHZhciBOYXRpdmVQcm9taXNlVGhlbiA9IE5hdGl2ZVByb21pc2VQcm90b3RvdHlwZVtfX3N5bWJvbF9fKCd0aGVuJyldXG4gICAgICAgID0gTmF0aXZlUHJvbWlzZVByb3RvdG90eXBlLnRoZW47XG4gICAgTmF0aXZlUHJvbWlzZVByb3RvdG90eXBlLnRoZW4gPSBmdW5jdGlvbihvblJlc29sdmUsIG9uUmVqZWN0KSB7XG4gICAgICB2YXIgbmF0aXZlUHJvbWlzZSA9IHRoaXM7XG4gICAgICByZXR1cm4gbmV3IFpvbmVBd2FyZVByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBOYXRpdmVQcm9taXNlVGhlbi5jYWxsKG5hdGl2ZVByb21pc2UsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9KS50aGVuKG9uUmVzb2x2ZSwgb25SZWplY3QpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBnbG9iYWwuWm9uZSA9IFpvbmU7XG59KSh0eXBlb2Ygd2luZG93ID09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDogd2luZG93KTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
