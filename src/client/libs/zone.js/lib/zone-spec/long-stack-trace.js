'use strict';
(function () {
    var NEWLINE = '\n';
    var SEP = '  -------------  ';
    var IGNORE_FRAMES = [];
    var creationTrace = '__creationTrace__';
    var LongStackTrace = (function () {
        function LongStackTrace() {
            this.error = getStacktrace();
            this.timestamp = new Date();
        }
        return LongStackTrace;
    }());
    function getStacktraceWithUncaughtError() {
        return new Error('STACKTRACE TRACKING');
    }
    function getStacktraceWithCaughtError() {
        try {
            throw getStacktraceWithUncaughtError();
        }
        catch (e) {
            return e;
        }
    }
    // Some implementations of exception handling don't create a stack trace if the exception
    // isn't thrown, however it's faster not to actually throw the exception.
    var error = getStacktraceWithUncaughtError();
    var coughtError = getStacktraceWithCaughtError();
    var getStacktrace = error.stack
        ? getStacktraceWithUncaughtError
        : (coughtError.stack ? getStacktraceWithCaughtError : getStacktraceWithUncaughtError);
    function getFrames(error) {
        return error.stack ? error.stack.split(NEWLINE) : [];
    }
    function addErrorStack(lines, error) {
        var trace;
        trace = getFrames(error);
        for (var i = 0; i < trace.length; i++) {
            var frame = trace[i];
            // Filter out the Frames which are part of stack capturing.
            if (!(i < IGNORE_FRAMES.length && IGNORE_FRAMES[i] === frame)) {
                lines.push(trace[i]);
            }
        }
    }
    function renderLongStackTrace(frames, stack) {
        var longTrace = [stack];
        if (frames) {
            var timestamp = new Date().getTime();
            for (var i = 0; i < frames.length; i++) {
                var traceFrames = frames[i];
                var lastTime = traceFrames.timestamp;
                longTrace.push(SEP + " Elapsed: " + (timestamp - lastTime.getTime()) + " ms; At: " + lastTime + " " + SEP);
                addErrorStack(longTrace, traceFrames.error);
                timestamp = lastTime.getTime();
            }
        }
        return longTrace.join(NEWLINE);
    }
    Zone['longStackTraceZoneSpec'] = {
        name: 'long-stack-trace',
        longStackTraceLimit: 10,
        onScheduleTask: function (parentZoneDelegate, currentZone, targetZone, task) {
            var currentTask = Zone.currentTask;
            var trace = currentTask && currentTask.data && currentTask.data[creationTrace] || [];
            trace = [new LongStackTrace()].concat(trace);
            if (trace.length > this.longStackTraceLimit) {
                trace.length = this.longStackTraceLimit;
            }
            if (!task.data)
                task.data = {};
            task.data[creationTrace] = trace;
            return parentZoneDelegate.scheduleTask(targetZone, task);
        },
        onHandleError: function (parentZoneDelegate, currentZone, targetZone, error) {
            var parentTask = Zone.currentTask;
            if (error instanceof Error && parentTask) {
                var descriptor = Object.getOwnPropertyDescriptor(error, 'stack');
                if (descriptor) {
                    var delegateGet = descriptor.get;
                    var value = descriptor.value;
                    descriptor = {
                        get: function () {
                            return renderLongStackTrace(parentTask.data && parentTask.data[creationTrace], delegateGet ? delegateGet.apply(this) : value);
                        }
                    };
                    Object.defineProperty(error, 'stack', descriptor);
                }
                else {
                    error.stack = renderLongStackTrace(parentTask.data && parentTask.data[creationTrace], error.stack);
                }
            }
            return parentZoneDelegate.handleError(targetZone, error);
        }
    };
    function captureStackTraces(stackTraces, count) {
        if (count > 0) {
            stackTraces.push(getFrames((new LongStackTrace()).error));
            captureStackTraces(stackTraces, count - 1);
        }
    }
    function computeIgnoreFrames() {
        var frames = [];
        captureStackTraces(frames, 2);
        var frames1 = frames[0];
        var frames2 = frames[1];
        for (var i = 0; i < frames1.length; i++) {
            var frame1 = frames1[i];
            var frame2 = frames2[i];
            if (frame1 === frame2) {
                IGNORE_FRAMES.push(frame1);
            }
            else {
                break;
            }
        }
    }
    computeIgnoreFrames();
})();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInB1YmxpYy9ub2RlX21vZHVsZXMvem9uZS5qcy9saWIvem9uZS1zcGVjL2xvbmctc3RhY2stdHJhY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDO0FBQ2IsQ0FBQztJQUNDLElBQU0sT0FBTyxHQUFHLElBQUksQ0FBQztJQUNyQixJQUFNLEdBQUcsR0FBRyxtQkFBbUIsQ0FBQztJQUNoQyxJQUFNLGFBQWEsR0FBRyxFQUFFLENBQUM7SUFDekIsSUFBTSxhQUFhLEdBQUcsbUJBQW1CLENBQUM7SUFFMUM7UUFBQTtZQUNFLFVBQUssR0FBVSxhQUFhLEVBQUUsQ0FBQztZQUMvQixjQUFTLEdBQVMsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUUvQixDQUFDO1FBQUQscUJBQUM7SUFBRCxDQUpBLEFBSUMsSUFBQTtJQUVEO1FBQ0UsTUFBTSxDQUFDLElBQUksS0FBSyxDQUFDLHFCQUFxQixDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVEO1FBQ0UsSUFBSSxDQUFDO1lBQ0gsTUFBTSw4QkFBOEIsRUFBRSxDQUFDO1FBQ3pDLENBQUU7UUFBQSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ1gsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUNYLENBQUM7SUFDSCxDQUFDO0lBRUQseUZBQXlGO0lBQ3pGLHlFQUF5RTtJQUN6RSxJQUFJLEtBQUssR0FBRyw4QkFBOEIsRUFBRSxDQUFDO0lBQzdDLElBQUksV0FBVyxHQUFHLDRCQUE0QixFQUFFLENBQUM7SUFDakQsSUFBSSxhQUFhLEdBQUcsS0FBSyxDQUFDLEtBQUs7VUFDekIsOEJBQThCO1VBQzlCLENBQUMsV0FBVyxDQUFDLEtBQUssR0FBRyw0QkFBNEIsR0FBRSw4QkFBOEIsQ0FBQyxDQUFDO0lBRXpGLG1CQUFtQixLQUFZO1FBQzdCLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVB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SyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDZCxXQUFXLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksY0FBYyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQzFELGtCQUFrQixDQUFDLFdBQVcsRUFBRSxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDN0MsQ0FBQztJQUNILENBQUM7SUFFRDtRQUNFLElBQUksTUFBTSxHQUFlLEVBQUUsQ0FBQztRQUM1QixrQkFBa0IsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDOUIsSUFBSSxPQUFPLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3hCLElBQUksT0FBTyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN4QixHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUN4QyxJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDeEIsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3hCLEVBQUUsQ0FBQyxDQUFDLE1BQU0sS0FBSyxNQUFNLENBQUMsQ0FBQyxDQUFDO2dCQUN0QixhQUFhLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQzdCLENBQUM7WUFBQyxJQUFJLENBQUMsQ0FBQztnQkFDTixLQUFLLENBQUM7WUFDUixDQUFDO1FBQ0gsQ0FBQztJQUNILENBQUM7SUFDRCxtQkFBbUIsRUFBRSxDQUFDO0FBQ3hCLENBQUMsQ0FBQyxFQUFFLENBQUMiLCJmaWxlIjoicHVibGljL25vZGVfbW9kdWxlcy96b25lLmpzL2xpYi96b25lLXNwZWMvbG9uZy1zdGFjay10cmFjZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbihmdW5jdGlvbigpIHtcbiAgY29uc3QgTkVXTElORSA9ICdcXG4nO1xuICBjb25zdCBTRVAgPSAnICAtLS0tLS0tLS0tLS0tICAnO1xuICBjb25zdCBJR05PUkVfRlJBTUVTID0gW107XG4gIGNvbnN0IGNyZWF0aW9uVHJhY2UgPSAnX19jcmVhdGlvblRyYWNlX18nO1xuXG4gIGNsYXNzIExvbmdTdGFja1RyYWNlIHtcbiAgICBlcnJvcjogRXJyb3IgPSBnZXRTdGFja3RyYWNlKCk7XG4gICAgdGltZXN0YW1wOiBEYXRlID0gbmV3IERhdGUoKTtcblxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0U3RhY2t0cmFjZVdpdGhVbmNhdWdodEVycm9yICgpOiBFcnJvciB7XG4gICAgcmV0dXJuIG5ldyBFcnJvcignU1RBQ0tUUkFDRSBUUkFDS0lORycpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0U3RhY2t0cmFjZVdpdGhDYXVnaHRFcnJvcigpOiBFcnJvciB7XG4gICAgdHJ5IHtcbiAgICAgIHRocm93IGdldFN0YWNrdHJhY2VXaXRoVW5jYXVnaHRFcnJvcigpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBlO1xuICAgIH1cbiAgfVxuXG4gIC8vIFNvbWUgaW1wbGVtZW50YXRpb25zIG9mIGV4Y2VwdGlvbiBoYW5kbGluZyBkb24ndCBjcmVhdGUgYSBzdGFjayB0cmFjZSBpZiB0aGUgZXhjZXB0aW9uXG4gIC8vIGlzbid0IHRocm93biwgaG93ZXZlciBpdCdzIGZhc3RlciBub3QgdG8gYWN0dWFsbHkgdGhyb3cgdGhlIGV4Y2VwdGlvbi5cbiAgdmFyIGVycm9yID0gZ2V0U3RhY2t0cmFjZVdpdGhVbmNhdWdodEVycm9yKCk7XG4gIHZhciBjb3VnaHRFcnJvciA9IGdldFN0YWNrdHJhY2VXaXRoQ2F1Z2h0RXJyb3IoKTtcbiAgdmFyIGdldFN0YWNrdHJhY2UgPSBlcnJvci5zdGFja1xuICAgICAgPyBnZXRTdGFja3RyYWNlV2l0aFVuY2F1Z2h0RXJyb3JcbiAgICAgIDogKGNvdWdodEVycm9yLnN0YWNrID8gZ2V0U3RhY2t0cmFjZVdpdGhDYXVnaHRFcnJvcjogZ2V0U3RhY2t0cmFjZVdpdGhVbmNhdWdodEVycm9yKTtcblxuICBmdW5jdGlvbiBnZXRGcmFtZXMoZXJyb3I6IEVycm9yKTogc3RyaW5nW10ge1xuICAgIHJldHVybiBlcnJvci5zdGFjayA/IGVycm9yLnN0YWNrLnNwbGl0KE5FV0xJTkUpIDogW107XG4gIH1cblxuICBmdW5jdGlvbiBhZGRFcnJvclN0YWNrKGxpbmVzOnN0cmluZ1tdLCBlcnJvcjpFcnJvcik6dm9pZCB7XG4gICAgdmFyIHRyYWNlOiBzdHJpbmdbXTtcbiAgICB0cmFjZSA9IGdldEZyYW1lcyhlcnJvcik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0cmFjZS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGZyYW1lID0gdHJhY2VbaV07XG4gICAgICAvLyBGaWx0ZXIgb3V0IHRoZSBGcmFtZXMgd2hpY2ggYXJlIHBhcnQgb2Ygc3RhY2sgY2FwdHVyaW5nLlxuICAgICAgaWYgKCEgKGkgPCBJR05PUkVfRlJBTUVTLmxlbmd0aCAmJiBJR05PUkVfRlJBTUVTW2ldID09PSBmcmFtZSkpIHtcbiAgICAgICAgbGluZXMucHVzaCh0cmFjZVtpXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVuZGVyTG9uZ1N0YWNrVHJhY2UoZnJhbWVzOiBMb25nU3RhY2tUcmFjZVtdLCBzdGFjazogc3RyaW5nKTogc3RyaW5nIHtcbiAgICB2YXIgbG9uZ1RyYWNlOiBzdHJpbmdbXSA9IFtzdGFja107XG5cbiAgICBpZiAoZnJhbWVzKSB7XG4gICAgICB2YXIgdGltZXN0YW1wID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZyYW1lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgdHJhY2VGcmFtZXM6IExvbmdTdGFja1RyYWNlID0gZnJhbWVzW2ldO1xuICAgICAgICB2YXIgbGFzdFRpbWUgPSB0cmFjZUZyYW1lcy50aW1lc3RhbXA7XG4gICAgICAgIGxvbmdUcmFjZS5wdXNoKGAke1NFUH0gRWxhcHNlZDogJHt0aW1lc3RhbXAgLSBsYXN0VGltZS5nZXRUaW1lKCl9IG1zOyBBdDogJHtsYXN0VGltZX0gJHtTRVB9YCk7XG4gICAgICAgIGFkZEVycm9yU3RhY2sobG9uZ1RyYWNlLCB0cmFjZUZyYW1lcy5lcnJvcik7XG5cbiAgICAgICAgdGltZXN0YW1wID0gbGFzdFRpbWUuZ2V0VGltZSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBsb25nVHJhY2Uuam9pbihORVdMSU5FKTtcbiAgfVxuXG4gIFpvbmVbJ2xvbmdTdGFja1RyYWNlWm9uZVNwZWMnXSA9IDxab25lU3BlYz57XG4gICAgbmFtZTogJ2xvbmctc3RhY2stdHJhY2UnLFxuICAgIGxvbmdTdGFja1RyYWNlTGltaXQ6IDEwLCAvLyBNYXggbnVtYmVyIG9mIHRhc2sgdG8ga2VlcCB0aGUgc3RhY2sgdHJhY2UgZm9yLlxuXG4gICAgb25TY2hlZHVsZVRhc2s6IGZ1bmN0aW9uKHBhcmVudFpvbmVEZWxlZ2F0ZTogWm9uZURlbGVnYXRlLCBjdXJyZW50Wm9uZTogWm9uZSwgdGFyZ2V0Wm9uZTogWm9uZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGFzazogVGFzayk6IGFueVxuICAgIHtcbiAgICAgIHZhciBjdXJyZW50VGFzayA9IFpvbmUuY3VycmVudFRhc2s7XG4gICAgICB2YXIgdHJhY2UgPSBjdXJyZW50VGFzayAmJiBjdXJyZW50VGFzay5kYXRhICYmIGN1cnJlbnRUYXNrLmRhdGFbY3JlYXRpb25UcmFjZV0gfHwgW107XG4gICAgICB0cmFjZSA9IFtuZXcgTG9uZ1N0YWNrVHJhY2UoKV0uY29uY2F0KHRyYWNlKTtcbiAgICAgIGlmICh0cmFjZS5sZW5ndGggPiB0aGlzLmxvbmdTdGFja1RyYWNlTGltaXQpIHtcbiAgICAgICAgdHJhY2UubGVuZ3RoID0gdGhpcy5sb25nU3RhY2tUcmFjZUxpbWl0O1xuICAgICAgfVxuICAgICAgaWYgKCF0YXNrLmRhdGEpIHRhc2suZGF0YSA9IHt9O1xuICAgICAgdGFzay5kYXRhW2NyZWF0aW9uVHJhY2VdID0gdHJhY2U7XG4gICAgICByZXR1cm4gcGFyZW50Wm9uZURlbGVnYXRlLnNjaGVkdWxlVGFzayh0YXJnZXRab25lLCB0YXNrKTtcbiAgICB9LFxuXG4gICAgb25IYW5kbGVFcnJvcjogZnVuY3Rpb24ocGFyZW50Wm9uZURlbGVnYXRlOiBab25lRGVsZWdhdGUsIGN1cnJlbnRab25lOiBab25lLCB0YXJnZXRab25lOiBab25lLFxuICAgICAgICAgICAgICAgICBlcnJvcjogYW55KTogYW55XG4gICAge1xuICAgICAgdmFyIHBhcmVudFRhc2sgPSBab25lLmN1cnJlbnRUYXNrO1xuICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IgJiYgcGFyZW50VGFzaykge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZXJyb3IsICdzdGFjaycpO1xuICAgICAgICBpZiAoZGVzY3JpcHRvcikge1xuICAgICAgICAgIHZhciBkZWxlZ2F0ZUdldCA9IGRlc2NyaXB0b3IuZ2V0O1xuICAgICAgICAgIHZhciB2YWx1ZSA9IGRlc2NyaXB0b3IudmFsdWU7XG4gICAgICAgICAgZGVzY3JpcHRvciA9IHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHJldHVybiByZW5kZXJMb25nU3RhY2tUcmFjZShwYXJlbnRUYXNrLmRhdGEgJiYgcGFyZW50VGFzay5kYXRhW2NyZWF0aW9uVHJhY2VdLFxuICAgICAgICAgICAgICAgICAgZGVsZWdhdGVHZXQgPyBkZWxlZ2F0ZUdldC5hcHBseSh0aGlzKTogdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGVycm9yLCAnc3RhY2snLCBkZXNjcmlwdG9yKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlcnJvci5zdGFjayA9IHJlbmRlckxvbmdTdGFja1RyYWNlKHBhcmVudFRhc2suZGF0YSAmJiBwYXJlbnRUYXNrLmRhdGFbY3JlYXRpb25UcmFjZV0sXG4gICAgICAgICAgICAgIGVycm9yLnN0YWNrKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHBhcmVudFpvbmVEZWxlZ2F0ZS5oYW5kbGVFcnJvcih0YXJnZXRab25lLCBlcnJvcik7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIGNhcHR1cmVTdGFja1RyYWNlcyhzdGFja1RyYWNlczogc3RyaW5nW11bXSwgY291bnQ6IG51bWJlcik6IHZvaWQge1xuICAgIGlmIChjb3VudCA+IDApIHtcbiAgICAgIHN0YWNrVHJhY2VzLnB1c2goZ2V0RnJhbWVzKChuZXcgTG9uZ1N0YWNrVHJhY2UoKSkuZXJyb3IpKTtcbiAgICAgIGNhcHR1cmVTdGFja1RyYWNlcyhzdGFja1RyYWNlcywgY291bnQgLSAxKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjb21wdXRlSWdub3JlRnJhbWVzKCkge1xuICAgIHZhciBmcmFtZXM6IHN0cmluZ1tdW10gPSBbXTtcbiAgICBjYXB0dXJlU3RhY2tUcmFjZXMoZnJhbWVzLCAyKTtcbiAgICB2YXIgZnJhbWVzMSA9IGZyYW1lc1swXTtcbiAgICB2YXIgZnJhbWVzMiA9IGZyYW1lc1sxXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZyYW1lczEubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBmcmFtZTEgPSBmcmFtZXMxW2ldO1xuICAgICAgdmFyIGZyYW1lMiA9IGZyYW1lczJbaV07XG4gICAgICBpZiAoZnJhbWUxID09PSBmcmFtZTIpIHtcbiAgICAgICAgSUdOT1JFX0ZSQU1FUy5wdXNoKGZyYW1lMSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgY29tcHV0ZUlnbm9yZUZyYW1lcygpO1xufSkoKTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
