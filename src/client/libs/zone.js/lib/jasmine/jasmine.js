'use strict';
// Patch jasmine's it and fit functions so that the `done` wrapCallback always resets the zone
// to the jasmine zone, which should be the root zone. (angular/zone.js#91)
if (!Zone) {
    throw new Error('zone.js does not seem to be installed');
}
var SET_TIMEOUT = '__zone_symbol__setTimeout';
var _global = typeof window == 'undefined' ? global : window;
// When you have in async test (test with `done` argument) jasmine will
// execute the next test synchronously in the done handler. This makes sense
// for most tests, but now with zones. With zones running next test
// synchronously means that the current zone does not get cleared. This
// results in a chain of nested zones, which makes it hard to reason about
// it. We override the `clearStack` method which forces jasmine to always
// drain the stack before next test gets executed.
jasmine.QueueRunner = (function (SuperQueueRunner) {
    // Subclass the `QueueRunner` and override the `clearStack` method.
    function alwaysClearStack(fn) {
        _global[SET_TIMEOUT](fn, 0);
    }
    function QueueRunner(options) {
        options.clearStack = alwaysClearStack;
        SuperQueueRunner.call(this, options);
    }
    QueueRunner.prototype = SuperQueueRunner.prototype;
    return QueueRunner;
})(jasmine.QueueRunner);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInB1YmxpYy9ub2RlX21vZHVsZXMvem9uZS5qcy9saWIvamFzbWluZS9qYXNtaW5lLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQztBQUNiLDhGQUE4RjtBQUM5RiwyRUFBMkU7QUFDM0UsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ1YsTUFBTSxJQUFJLEtBQUssQ0FBQyx1Q0FBdUMsQ0FBQyxDQUFDO0FBQzNELENBQUM7QUFFRCxJQUFJLFdBQVcsR0FBRywyQkFBMkIsQ0FBQztBQUM5QyxJQUFNLE9BQU8sR0FBRyxPQUFPLE1BQU0sSUFBSSxXQUFXLEdBQUcsTUFBTSxHQUFHLE1BQU0sQ0FBQztBQUcvRCx1RUFBdUU7QUFDdkUsNEVBQTRFO0FBQzVFLG1FQUFtRTtBQUNuRSx1RUFBdUU7QUFDdkUsMEVBQTBFO0FBQzFFLHlFQUF5RTtBQUN6RSxrREFBa0Q7QUFDNUMsT0FBUSxDQUFDLFdBQVcsR0FBRyxDQUFDLFVBQVUsZ0JBQWdCO0lBQ3RELG1FQUFtRTtJQUVuRSwwQkFBMEIsRUFBRTtRQUMxQixPQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFFRCxxQkFBcUIsT0FBTztRQUMxQixPQUFPLENBQUMsVUFBVSxHQUFHLGdCQUFnQixDQUFDO1FBQ3RDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUNELFdBQVcsQ0FBQyxTQUFTLEdBQUcsZ0JBQWdCLENBQUMsU0FBUyxDQUFDO0lBQ25ELE1BQU0sQ0FBQyxXQUFXLENBQUM7QUFDckIsQ0FBQyxDQUFDLENBQU8sT0FBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDIiwiZmlsZSI6InB1YmxpYy9ub2RlX21vZHVsZXMvem9uZS5qcy9saWIvamFzbWluZS9qYXNtaW5lLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuLy8gUGF0Y2ggamFzbWluZSdzIGl0IGFuZCBmaXQgZnVuY3Rpb25zIHNvIHRoYXQgdGhlIGBkb25lYCB3cmFwQ2FsbGJhY2sgYWx3YXlzIHJlc2V0cyB0aGUgem9uZVxuLy8gdG8gdGhlIGphc21pbmUgem9uZSwgd2hpY2ggc2hvdWxkIGJlIHRoZSByb290IHpvbmUuIChhbmd1bGFyL3pvbmUuanMjOTEpXG5pZiAoIVpvbmUpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCd6b25lLmpzIGRvZXMgbm90IHNlZW0gdG8gYmUgaW5zdGFsbGVkJyk7XG59XG5cbnZhciBTRVRfVElNRU9VVCA9ICdfX3pvbmVfc3ltYm9sX19zZXRUaW1lb3V0JztcbmNvbnN0IF9nbG9iYWwgPSB0eXBlb2Ygd2luZG93ID09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDogd2luZG93O1xuXG5cbi8vIFdoZW4geW91IGhhdmUgaW4gYXN5bmMgdGVzdCAodGVzdCB3aXRoIGBkb25lYCBhcmd1bWVudCkgamFzbWluZSB3aWxsXG4vLyBleGVjdXRlIHRoZSBuZXh0IHRlc3Qgc3luY2hyb25vdXNseSBpbiB0aGUgZG9uZSBoYW5kbGVyLiBUaGlzIG1ha2VzIHNlbnNlXG4vLyBmb3IgbW9zdCB0ZXN0cywgYnV0IG5vdyB3aXRoIHpvbmVzLiBXaXRoIHpvbmVzIHJ1bm5pbmcgbmV4dCB0ZXN0XG4vLyBzeW5jaHJvbm91c2x5IG1lYW5zIHRoYXQgdGhlIGN1cnJlbnQgem9uZSBkb2VzIG5vdCBnZXQgY2xlYXJlZC4gVGhpc1xuLy8gcmVzdWx0cyBpbiBhIGNoYWluIG9mIG5lc3RlZCB6b25lcywgd2hpY2ggbWFrZXMgaXQgaGFyZCB0byByZWFzb24gYWJvdXRcbi8vIGl0LiBXZSBvdmVycmlkZSB0aGUgYGNsZWFyU3RhY2tgIG1ldGhvZCB3aGljaCBmb3JjZXMgamFzbWluZSB0byBhbHdheXNcbi8vIGRyYWluIHRoZSBzdGFjayBiZWZvcmUgbmV4dCB0ZXN0IGdldHMgZXhlY3V0ZWQuXG4oPGFueT5qYXNtaW5lKS5RdWV1ZVJ1bm5lciA9IChmdW5jdGlvbiAoU3VwZXJRdWV1ZVJ1bm5lcikge1xuICAvLyBTdWJjbGFzcyB0aGUgYFF1ZXVlUnVubmVyYCBhbmQgb3ZlcnJpZGUgdGhlIGBjbGVhclN0YWNrYCBtZXRob2QuXG5cbiAgZnVuY3Rpb24gYWx3YXlzQ2xlYXJTdGFjayhmbikge1xuICAgIF9nbG9iYWxbU0VUX1RJTUVPVVRdKGZuLCAwKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIFF1ZXVlUnVubmVyKG9wdGlvbnMpIHtcbiAgICBvcHRpb25zLmNsZWFyU3RhY2sgPSBhbHdheXNDbGVhclN0YWNrO1xuICAgIFN1cGVyUXVldWVSdW5uZXIuY2FsbCh0aGlzLCBvcHRpb25zKTtcbiAgfVxuICBRdWV1ZVJ1bm5lci5wcm90b3R5cGUgPSBTdXBlclF1ZXVlUnVubmVyLnByb3RvdHlwZTtcbiAgcmV0dXJuIFF1ZXVlUnVubmVyO1xufSkoKDxhbnk+amFzbWluZSkuUXVldWVSdW5uZXIpO1xuXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
