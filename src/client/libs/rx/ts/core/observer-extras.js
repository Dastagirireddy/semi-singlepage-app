/// <reference path="./disposables/disposable.ts" />
/// <reference path="./checkedobserver.ts" />
/// <reference path="./notification.ts" />
(function () {
    var observer;
    var n = observer.toNotifier();
    var o = observer.asObserver();
    var c = observer.checked();
    o = observer.notifyOn(Rx.Scheduler.immediate);
    var so = Rx.Observer.fromNotifier(function (n) {
        // Handle next calls
        if (n.kind === 'N') {
            console.log('Next: ' + n.value);
        }
        // Handle error calls
        if (n.kind === 'E') {
            console.log('Error: ' + n.exception);
        }
        // Handle completed
        if (n.kind === 'C') {
            console.log('Completed');
        }
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInB1YmxpYy9ub2RlX21vZHVsZXMvcngvdHMvY29yZS9vYnNlcnZlci1leHRyYXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsQUFHQSxvREFIb0Q7QUFDcEQsNkNBQTZDO0FBQzdDLDBDQUEwQztBQTRDMUMsQ0FBQztJQUNHLElBQUksUUFBOEIsQ0FBQztJQUNuQyxJQUFJLENBQUMsR0FBcUQsUUFBUSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBRWhGLElBQUksQ0FBQyxHQUF5QixRQUFRLENBQUMsVUFBVSxFQUFFLENBQUM7SUFFcEQsSUFBSSxDQUFDLEdBQWdDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUV4RCxDQUFDLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBRTlDLElBQUksRUFBRSxHQUF5QixFQUFFLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBUyxVQUFDLENBQUM7UUFDOUQsb0JBQW9CO1FBQ3BCLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQztZQUNqQixPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDcEMsQ0FBQztRQUVELHFCQUFxQjtRQUNyQixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDakIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3pDLENBQUM7UUFFRCxtQkFBbUI7UUFDbkIsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ2pCLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUE7UUFDNUIsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoicHVibGljL25vZGVfbW9kdWxlcy9yeC90cy9jb3JlL29ic2VydmVyLWV4dHJhcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL2Rpc3Bvc2FibGVzL2Rpc3Bvc2FibGUudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vY2hlY2tlZG9ic2VydmVyLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL25vdGlmaWNhdGlvbi50c1wiIC8+XG5tb2R1bGUgUngge1xuXHRleHBvcnQgaW50ZXJmYWNlIE9ic2VydmVyPFQ+IHtcbiAgICAgICAgLyoqXG4gICAgICAgICogIENyZWF0ZXMgYSBub3RpZmljYXRpb24gY2FsbGJhY2sgZnJvbSBhbiBvYnNlcnZlci5cbiAgICAgICAgKiBAcmV0dXJucyBUaGUgYWN0aW9uIHRoYXQgZm9yd2FyZHMgaXRzIGlucHV0IG5vdGlmaWNhdGlvbiB0byB0aGUgdW5kZXJseWluZyBvYnNlcnZlci5cbiAgICAgICAgKi9cblx0XHR0b05vdGlmaWVyKCk6IChub3RpZmljYXRpb246IE5vdGlmaWNhdGlvbjxUPikgPT4gdm9pZDtcblxuICAgICAgICAvKipcbiAgICAgICAgKiAgSGlkZXMgdGhlIGlkZW50aXR5IG9mIGFuIG9ic2VydmVyLlxuICAgICAgICAqIEByZXR1cm5zIEFuIG9ic2VydmVyIHRoYXQgaGlkZXMgdGhlIGlkZW50aXR5IG9mIHRoZSBzcGVjaWZpZWQgb2JzZXJ2ZXIuXG4gICAgICAgICovXG5cdFx0YXNPYnNlcnZlcigpOiBPYnNlcnZlcjxUPjtcblxuICAgICAgICAvKipcbiAgICAgICAgKiAgQ2hlY2tzIGFjY2VzcyB0byB0aGUgb2JzZXJ2ZXIgZm9yIGdyYW1tYXIgdmlvbGF0aW9ucy4gVGhpcyBpbmNsdWRlcyBjaGVja2luZyBmb3IgbXVsdGlwbGUgT25FcnJvciBvciBPbkNvbXBsZXRlZCBjYWxscywgYXMgd2VsbCBhcyByZWVudHJhbmN5IGluIGFueSBvZiB0aGUgb2JzZXJ2ZXIgbWV0aG9kcy5cbiAgICAgICAgKiAgSWYgYSB2aW9sYXRpb24gaXMgZGV0ZWN0ZWQsIGFuIEVycm9yIGlzIHRocm93biBmcm9tIHRoZSBvZmZlbmRpbmcgb2JzZXJ2ZXIgbWV0aG9kIGNhbGwuXG4gICAgICAgICogQHJldHVybnMgQW4gb2JzZXJ2ZXIgdGhhdCBjaGVja3MgY2FsbGJhY2tzIGludm9jYXRpb25zIGFnYWluc3QgdGhlIG9ic2VydmVyIGdyYW1tYXIgYW5kLCBpZiB0aGUgY2hlY2tzIHBhc3MsIGZvcndhcmRzIHRob3NlIHRvIHRoZSBzcGVjaWZpZWQgb2JzZXJ2ZXIuXG4gICAgICAgICovXG4gICAgICAgIGNoZWNrZWQoKTogQ2hlY2tlZE9ic2VydmVyPFQ+O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAqIFNjaGVkdWxlcyB0aGUgaW52b2NhdGlvbiBvZiBvYnNlcnZlciBtZXRob2RzIG9uIHRoZSBnaXZlbiBzY2hlZHVsZXIuXG4gICAgICAgICogQHBhcmFtIHtTY2hlZHVsZXJ9IHNjaGVkdWxlciBTY2hlZHVsZXIgdG8gc2NoZWR1bGUgb2JzZXJ2ZXIgbWVzc2FnZXMgb24uXG4gICAgICAgICogQHJldHVybnMge09ic2VydmVyfSBPYnNlcnZlciB3aG9zZSBtZXNzYWdlcyBhcmUgc2NoZWR1bGVkIG9uIHRoZSBnaXZlbiBzY2hlZHVsZXIuXG4gICAgICAgICovXG4gICAgICAgIG5vdGlmeU9uKHNjaGVkdWxlcjogSVNjaGVkdWxlcik6IE9ic2VydmVyPFQ+O1xuXHR9XG5cblx0ZXhwb3J0IGludGVyZmFjZSBPYnNlcnZlclN0YXRpYyB7XG4gICAgICAgIC8qKlxuICAgICAgICAqICBDcmVhdGVzIGFuIG9ic2VydmVyIGZyb20gYSBub3RpZmljYXRpb24gY2FsbGJhY2suXG4gICAgICAgICpcbiAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICogQG1lbWJlck9mIE9ic2VydmVyXG4gICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciBBY3Rpb24gdGhhdCBoYW5kbGVzIGEgbm90aWZpY2F0aW9uLlxuICAgICAgICAqIEByZXR1cm5zIFRoZSBvYnNlcnZlciBvYmplY3QgdGhhdCBpbnZva2VzIHRoZSBzcGVjaWZpZWQgaGFuZGxlciB1c2luZyBhIG5vdGlmaWNhdGlvbiBjb3JyZXNwb25kaW5nIHRvIGVhY2ggbWVzc2FnZSBpdCByZWNlaXZlcy5cbiAgICAgICAgKi9cblx0XHRmcm9tTm90aWZpZXI8VD4oaGFuZGxlcjogKG5vdGlmaWNhdGlvbjogTm90aWZpY2F0aW9uPFQ+LCB0aGlzQXJnPzogYW55KSA9PiB2b2lkKTogT2JzZXJ2ZXI8VD47XG5cdH1cbn1cblxuXG4oZnVuY3Rpb24oKSB7XG4gICAgdmFyIG9ic2VydmVyOiBSeC5PYnNlcnZlcjxib29sZWFuPjtcbiAgICB2YXIgbjogKG5vdGlmaWNhdGlvbjogUnguTm90aWZpY2F0aW9uPGJvb2xlYW4+KSA9PiB2b2lkID0gb2JzZXJ2ZXIudG9Ob3RpZmllcigpO1xuXG4gICAgdmFyIG86IFJ4Lk9ic2VydmVyPGJvb2xlYW4+ID0gb2JzZXJ2ZXIuYXNPYnNlcnZlcigpO1xuXG4gICAgdmFyIGM6IFJ4LkNoZWNrZWRPYnNlcnZlcjxib29sZWFuPiA9IG9ic2VydmVyLmNoZWNrZWQoKTtcblxuICAgIG8gPSBvYnNlcnZlci5ub3RpZnlPbihSeC5TY2hlZHVsZXIuaW1tZWRpYXRlKTtcblxuICAgIHZhciBzbyA6IFJ4Lk9ic2VydmVyPG51bWJlcj4gPSBSeC5PYnNlcnZlci5mcm9tTm90aWZpZXI8bnVtYmVyPigobikgPT4ge1xuICAgICAgICAvLyBIYW5kbGUgbmV4dCBjYWxsc1xuICAgICAgICBpZiAobi5raW5kID09PSAnTicpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdOZXh0OiAnICsgbi52YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBIYW5kbGUgZXJyb3IgY2FsbHNcbiAgICAgICAgaWYgKG4ua2luZCA9PT0gJ0UnKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnRXJyb3I6ICcgKyBuLmV4Y2VwdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBIYW5kbGUgY29tcGxldGVkXG4gICAgICAgIGlmIChuLmtpbmQgPT09ICdDJykge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ0NvbXBsZXRlZCcpXG4gICAgICAgIH1cbiAgICB9KTtcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
