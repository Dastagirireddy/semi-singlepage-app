/// <reference path="../../observable.ts"/>
(function () {
    var o;
    var io;
    var so;
    var p;
    var r = o.withLatestFrom(io, p, so, function (vo, vio, vp, vso) { return ({ vo: vo, vio: vio, vp: vp, vso: vso }); });
    var rr = o.withLatestFrom([io, so, p], function (v1, items) { return 5; });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInB1YmxpYy9ub2RlX21vZHVsZXMvcngvdHMvY29yZS9saW5xL29ic2VydmFibGUvd2l0aGxhdGVzdGZyb20udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsQUFDQSwyQ0FEMkM7QUFtRDNDLENBQUM7SUFDRyxJQUFJLENBQXlCLENBQUM7SUFDOUIsSUFBSSxFQUEwQixDQUFDO0lBQy9CLElBQUksRUFBc0IsQ0FBQztJQUMzQixJQUFJLENBQTRCLENBQUM7SUFFakMsSUFBSSxDQUFDLEdBQWdGLENBQUMsQ0FBQyxjQUFjLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsVUFBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxHQUFHLElBQUssT0FBQSxDQUFDLEVBQUUsSUFBQSxFQUFFLEVBQUUsS0FBQSxHQUFHLEVBQUUsSUFBQSxFQUFFLEVBQUUsS0FBQSxHQUFHLEVBQUUsQ0FBQyxFQUF0QixDQUFzQixDQUFDLENBQUM7SUFFL0osSUFBSSxFQUFFLEdBQTJCLENBQUMsQ0FBQyxjQUFjLENBQVEsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLFVBQUMsRUFBRSxFQUFFLEtBQUssSUFBSyxPQUFBLENBQUMsRUFBRCxDQUFDLENBQUMsQ0FBQztBQUM1RixDQUFDLENBQUMsQ0FBQyIsImZpbGUiOiJwdWJsaWMvbm9kZV9tb2R1bGVzL3J4L3RzL2NvcmUvbGlucS9vYnNlcnZhYmxlL3dpdGhsYXRlc3Rmcm9tLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL29ic2VydmFibGUudHNcIi8+XG5tb2R1bGUgUngge1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgT2JzZXJ2YWJsZTxUPiB7XG4gICAgICAgIC8qKlxuICAgICAgICAqIE1lcmdlcyB0aGUgc3BlY2lmaWVkIG9ic2VydmFibGUgc2VxdWVuY2VzIGludG8gb25lIG9ic2VydmFibGUgc2VxdWVuY2UgYnkgdXNpbmcgdGhlIHNlbGVjdG9yIGZ1bmN0aW9uIG9ubHkgd2hlbiB0aGUgKGZpcnN0KSBzb3VyY2Ugb2JzZXJ2YWJsZSBzZXF1ZW5jZSBwcm9kdWNlcyBhbiBlbGVtZW50LlxuICAgICAgICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlfSBBbiBvYnNlcnZhYmxlIHNlcXVlbmNlIGNvbnRhaW5pbmcgdGhlIHJlc3VsdCBvZiBjb21iaW5pbmcgZWxlbWVudHMgb2YgdGhlIHNvdXJjZXMgdXNpbmcgdGhlIHNwZWNpZmllZCByZXN1bHQgc2VsZWN0b3IgZnVuY3Rpb24uXG4gICAgICAgICovXG4gICAgICAgIHdpdGhMYXRlc3RGcm9tPFQyLCBUUmVzdWx0PihzZWNvbmQ6IE9ic2VydmFibGVPclByb21pc2U8VDI+LCByZXN1bHRTZWxlY3RvcjogKHYxOiBULCB2MjogVDIpID0+IFRSZXN1bHQpOiBPYnNlcnZhYmxlPFRSZXN1bHQ+O1xuICAgICAgICAvKipcbiAgICAgICAgKiBNZXJnZXMgdGhlIHNwZWNpZmllZCBvYnNlcnZhYmxlIHNlcXVlbmNlcyBpbnRvIG9uZSBvYnNlcnZhYmxlIHNlcXVlbmNlIGJ5IHVzaW5nIHRoZSBzZWxlY3RvciBmdW5jdGlvbiBvbmx5IHdoZW4gdGhlIChmaXJzdCkgc291cmNlIG9ic2VydmFibGUgc2VxdWVuY2UgcHJvZHVjZXMgYW4gZWxlbWVudC5cbiAgICAgICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZX0gQW4gb2JzZXJ2YWJsZSBzZXF1ZW5jZSBjb250YWluaW5nIHRoZSByZXN1bHQgb2YgY29tYmluaW5nIGVsZW1lbnRzIG9mIHRoZSBzb3VyY2VzIHVzaW5nIHRoZSBzcGVjaWZpZWQgcmVzdWx0IHNlbGVjdG9yIGZ1bmN0aW9uLlxuICAgICAgICAqL1xuICAgICAgICB3aXRoTGF0ZXN0RnJvbTxUMiwgVDMsIFRSZXN1bHQ+KHNlY29uZDogT2JzZXJ2YWJsZU9yUHJvbWlzZTxUMj4sIHRoaXJkOiBPYnNlcnZhYmxlT3JQcm9taXNlPFQzPiwgcmVzdWx0U2VsZWN0b3I6ICh2MTogVCwgdjI6IFQyLCB2MzogVDMpID0+IFRSZXN1bHQpOiBPYnNlcnZhYmxlPFRSZXN1bHQ+O1xuICAgICAgICAvKipcbiAgICAgICAgKiBNZXJnZXMgdGhlIHNwZWNpZmllZCBvYnNlcnZhYmxlIHNlcXVlbmNlcyBpbnRvIG9uZSBvYnNlcnZhYmxlIHNlcXVlbmNlIGJ5IHVzaW5nIHRoZSBzZWxlY3RvciBmdW5jdGlvbiBvbmx5IHdoZW4gdGhlIChmaXJzdCkgc291cmNlIG9ic2VydmFibGUgc2VxdWVuY2UgcHJvZHVjZXMgYW4gZWxlbWVudC5cbiAgICAgICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZX0gQW4gb2JzZXJ2YWJsZSBzZXF1ZW5jZSBjb250YWluaW5nIHRoZSByZXN1bHQgb2YgY29tYmluaW5nIGVsZW1lbnRzIG9mIHRoZSBzb3VyY2VzIHVzaW5nIHRoZSBzcGVjaWZpZWQgcmVzdWx0IHNlbGVjdG9yIGZ1bmN0aW9uLlxuICAgICAgICAqL1xuICAgICAgICB3aXRoTGF0ZXN0RnJvbTxUMiwgVDMsIFQ0LCBUUmVzdWx0PihzZWNvbmQ6IE9ic2VydmFibGVPclByb21pc2U8VDI+LCB0aGlyZDogT2JzZXJ2YWJsZU9yUHJvbWlzZTxUMz4sIGZvdXJ0aDogT2JzZXJ2YWJsZU9yUHJvbWlzZTxUND4sIHJlc3VsdFNlbGVjdG9yOiAodjE6IFQsIHYyOiBUMiwgdjM6IFQzLCB2NDogVDQpID0+IFRSZXN1bHQpOiBPYnNlcnZhYmxlPFRSZXN1bHQ+O1xuICAgICAgICAvKipcbiAgICAgICAgKiBNZXJnZXMgdGhlIHNwZWNpZmllZCBvYnNlcnZhYmxlIHNlcXVlbmNlcyBpbnRvIG9uZSBvYnNlcnZhYmxlIHNlcXVlbmNlIGJ5IHVzaW5nIHRoZSBzZWxlY3RvciBmdW5jdGlvbiBvbmx5IHdoZW4gdGhlIChmaXJzdCkgc291cmNlIG9ic2VydmFibGUgc2VxdWVuY2UgcHJvZHVjZXMgYW4gZWxlbWVudC5cbiAgICAgICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZX0gQW4gb2JzZXJ2YWJsZSBzZXF1ZW5jZSBjb250YWluaW5nIHRoZSByZXN1bHQgb2YgY29tYmluaW5nIGVsZW1lbnRzIG9mIHRoZSBzb3VyY2VzIHVzaW5nIHRoZSBzcGVjaWZpZWQgcmVzdWx0IHNlbGVjdG9yIGZ1bmN0aW9uLlxuICAgICAgICAqL1xuICAgICAgICB3aXRoTGF0ZXN0RnJvbTxUMiwgVDMsIFQ0LCBUNSwgVFJlc3VsdD4oc2Vjb25kOiBPYnNlcnZhYmxlT3JQcm9taXNlPFQyPiwgdGhpcmQ6IE9ic2VydmFibGVPclByb21pc2U8VDM+LCBmb3VydGg6IE9ic2VydmFibGVPclByb21pc2U8VDQ+LCBmaWZ0aDogT2JzZXJ2YWJsZU9yUHJvbWlzZTxUNT4sIHJlc3VsdFNlbGVjdG9yOiAodjE6IFQsIHYyOiBUMiwgdjM6IFQzLCB2NDogVDQsIHY1OiBUNSkgPT4gVFJlc3VsdCk6IE9ic2VydmFibGU8VFJlc3VsdD47XG4gICAgICAgIC8qKlxuICAgICAgICAqIE1lcmdlcyB0aGUgc3BlY2lmaWVkIG9ic2VydmFibGUgc2VxdWVuY2VzIGludG8gb25lIG9ic2VydmFibGUgc2VxdWVuY2UgYnkgdXNpbmcgdGhlIHNlbGVjdG9yIGZ1bmN0aW9uIG9ubHkgd2hlbiB0aGUgKGZpcnN0KSBzb3VyY2Ugb2JzZXJ2YWJsZSBzZXF1ZW5jZSBwcm9kdWNlcyBhbiBlbGVtZW50LlxuICAgICAgICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlfSBBbiBvYnNlcnZhYmxlIHNlcXVlbmNlIGNvbnRhaW5pbmcgdGhlIHJlc3VsdCBvZiBjb21iaW5pbmcgZWxlbWVudHMgb2YgdGhlIHNvdXJjZXMgdXNpbmcgdGhlIHNwZWNpZmllZCByZXN1bHQgc2VsZWN0b3IgZnVuY3Rpb24uXG4gICAgICAgICovXG4gICAgICAgIHdpdGhMYXRlc3RGcm9tPFQyLCBUMywgVDQsIFQ1LCBUNiwgVFJlc3VsdD4oc2Vjb25kOiBPYnNlcnZhYmxlT3JQcm9taXNlPFQyPiwgdGhpcmQ6IE9ic2VydmFibGVPclByb21pc2U8VDM+LCBmb3VydGg6IE9ic2VydmFibGVPclByb21pc2U8VDQ+LCBmaWZ0aDogT2JzZXJ2YWJsZU9yUHJvbWlzZTxUNT4sIHNpeHRoOiBPYnNlcnZhYmxlT3JQcm9taXNlPFQ2PiwgcmVzdWx0U2VsZWN0b3I6ICh2MTogVCwgdjI6IFQyLCB2MzogVDMsIHY0OiBUNCwgdjU6IFQ1LCB2NjogVDYpID0+IFRSZXN1bHQpOiBPYnNlcnZhYmxlPFRSZXN1bHQ+O1xuICAgICAgICAvKipcbiAgICAgICAgKiBNZXJnZXMgdGhlIHNwZWNpZmllZCBvYnNlcnZhYmxlIHNlcXVlbmNlcyBpbnRvIG9uZSBvYnNlcnZhYmxlIHNlcXVlbmNlIGJ5IHVzaW5nIHRoZSBzZWxlY3RvciBmdW5jdGlvbiBvbmx5IHdoZW4gdGhlIChmaXJzdCkgc291cmNlIG9ic2VydmFibGUgc2VxdWVuY2UgcHJvZHVjZXMgYW4gZWxlbWVudC5cbiAgICAgICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZX0gQW4gb2JzZXJ2YWJsZSBzZXF1ZW5jZSBjb250YWluaW5nIHRoZSByZXN1bHQgb2YgY29tYmluaW5nIGVsZW1lbnRzIG9mIHRoZSBzb3VyY2VzIHVzaW5nIHRoZSBzcGVjaWZpZWQgcmVzdWx0IHNlbGVjdG9yIGZ1bmN0aW9uLlxuICAgICAgICAqL1xuICAgICAgICB3aXRoTGF0ZXN0RnJvbTxUMiwgVDMsIFQ0LCBUNSwgVDYsIFQ3LCBUUmVzdWx0PihzZWNvbmQ6IE9ic2VydmFibGVPclByb21pc2U8VDI+LCB0aGlyZDogT2JzZXJ2YWJsZU9yUHJvbWlzZTxUMz4sIGZvdXJ0aDogT2JzZXJ2YWJsZU9yUHJvbWlzZTxUND4sIGZpZnRoOiBPYnNlcnZhYmxlT3JQcm9taXNlPFQ1Piwgc2l4dGg6IE9ic2VydmFibGVPclByb21pc2U8VDY+LCBzZXZlbnRoOiBPYnNlcnZhYmxlT3JQcm9taXNlPFQ3PiwgcmVzdWx0U2VsZWN0b3I6ICh2MTogVCwgdjI6IFQyLCB2MzogVDMsIHY0OiBUNCwgdjU6IFQ1LCB2NjogVDYsIHY3OiBUNykgPT4gVFJlc3VsdCk6IE9ic2VydmFibGU8VFJlc3VsdD47XG4gICAgICAgIC8qKlxuICAgICAgICAqIE1lcmdlcyB0aGUgc3BlY2lmaWVkIG9ic2VydmFibGUgc2VxdWVuY2VzIGludG8gb25lIG9ic2VydmFibGUgc2VxdWVuY2UgYnkgdXNpbmcgdGhlIHNlbGVjdG9yIGZ1bmN0aW9uIG9ubHkgd2hlbiB0aGUgKGZpcnN0KSBzb3VyY2Ugb2JzZXJ2YWJsZSBzZXF1ZW5jZSBwcm9kdWNlcyBhbiBlbGVtZW50LlxuICAgICAgICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlfSBBbiBvYnNlcnZhYmxlIHNlcXVlbmNlIGNvbnRhaW5pbmcgdGhlIHJlc3VsdCBvZiBjb21iaW5pbmcgZWxlbWVudHMgb2YgdGhlIHNvdXJjZXMgdXNpbmcgdGhlIHNwZWNpZmllZCByZXN1bHQgc2VsZWN0b3IgZnVuY3Rpb24uXG4gICAgICAgICovXG4gICAgICAgIHdpdGhMYXRlc3RGcm9tPFQyLCBUMywgVDQsIFQ1LCBUNiwgVDcsIFQ4LCBUUmVzdWx0PihzZWNvbmQ6IE9ic2VydmFibGVPclByb21pc2U8VDI+LCB0aGlyZDogT2JzZXJ2YWJsZU9yUHJvbWlzZTxUMz4sIGZvdXJ0aDogT2JzZXJ2YWJsZU9yUHJvbWlzZTxUND4sIGZpZnRoOiBPYnNlcnZhYmxlT3JQcm9taXNlPFQ1Piwgc2l4dGg6IE9ic2VydmFibGVPclByb21pc2U8VDY+LCBzZXZlbnRoOiBPYnNlcnZhYmxlT3JQcm9taXNlPFQ3PiwgZWlnaHRoOiBPYnNlcnZhYmxlT3JQcm9taXNlPFQ4PiwgcmVzdWx0U2VsZWN0b3I6ICh2MTogVCwgdjI6IFQyLCB2MzogVDMsIHY0OiBUNCwgdjU6IFQ1LCB2NjogVDYsIHY3OiBUNywgdjg6IFQ4KSA9PiBUUmVzdWx0KTogT2JzZXJ2YWJsZTxUUmVzdWx0PjtcbiAgICAgICAgLyoqXG4gICAgICAgICogTWVyZ2VzIHRoZSBzcGVjaWZpZWQgb2JzZXJ2YWJsZSBzZXF1ZW5jZXMgaW50byBvbmUgb2JzZXJ2YWJsZSBzZXF1ZW5jZSBieSB1c2luZyB0aGUgc2VsZWN0b3IgZnVuY3Rpb24gb25seSB3aGVuIHRoZSAoZmlyc3QpIHNvdXJjZSBvYnNlcnZhYmxlIHNlcXVlbmNlIHByb2R1Y2VzIGFuIGVsZW1lbnQuXG4gICAgICAgICogQHJldHVybnMge09ic2VydmFibGV9IEFuIG9ic2VydmFibGUgc2VxdWVuY2UgY29udGFpbmluZyB0aGUgcmVzdWx0IG9mIGNvbWJpbmluZyBlbGVtZW50cyBvZiB0aGUgc291cmNlcyB1c2luZyB0aGUgc3BlY2lmaWVkIHJlc3VsdCBzZWxlY3RvciBmdW5jdGlvbi5cbiAgICAgICAgKi9cbiAgICAgICAgd2l0aExhdGVzdEZyb208VDIsIFQzLCBUNCwgVDUsIFQ2LCBUNywgVDgsIFQ5LCBUUmVzdWx0PihzZWNvbmQ6IE9ic2VydmFibGVPclByb21pc2U8VDI+LCB0aGlyZDogT2JzZXJ2YWJsZU9yUHJvbWlzZTxUMz4sIGZvdXJ0aDogT2JzZXJ2YWJsZU9yUHJvbWlzZTxUND4sIGZpZnRoOiBPYnNlcnZhYmxlT3JQcm9taXNlPFQ1Piwgc2l4dGg6IE9ic2VydmFibGVPclByb21pc2U8VDY+LCBzZXZlbnRoOiBPYnNlcnZhYmxlT3JQcm9taXNlPFQ3PiwgZWlnaHRoOiBPYnNlcnZhYmxlT3JQcm9taXNlPFQ4PiwgbmludGg6IE9ic2VydmFibGVPclByb21pc2U8VDk+LCByZXN1bHRTZWxlY3RvcjogKHYxOiBULCB2MjogVDIsIHYzOiBUMywgdjQ6IFQ0LCB2NTogVDUsIHY2OiBUNiwgdjc6IFQ3LCB2ODogVDgsIHY5OiBUOSkgPT4gVFJlc3VsdCk6IE9ic2VydmFibGU8VFJlc3VsdD47XG4gICAgICAgIC8qKlxuICAgICAgICAqIE1lcmdlcyB0aGUgc3BlY2lmaWVkIG9ic2VydmFibGUgc2VxdWVuY2VzIGludG8gb25lIG9ic2VydmFibGUgc2VxdWVuY2UgYnkgdXNpbmcgdGhlIHNlbGVjdG9yIGZ1bmN0aW9uIG9ubHkgd2hlbiB0aGUgKGZpcnN0KSBzb3VyY2Ugb2JzZXJ2YWJsZSBzZXF1ZW5jZSBwcm9kdWNlcyBhbiBlbGVtZW50LlxuICAgICAgICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlfSBBbiBvYnNlcnZhYmxlIHNlcXVlbmNlIGNvbnRhaW5pbmcgdGhlIHJlc3VsdCBvZiBjb21iaW5pbmcgZWxlbWVudHMgb2YgdGhlIHNvdXJjZXMgdXNpbmcgdGhlIHNwZWNpZmllZCByZXN1bHQgc2VsZWN0b3IgZnVuY3Rpb24uXG4gICAgICAgICovXG4gICAgICAgIHdpdGhMYXRlc3RGcm9tPFRPdGhlciwgVFJlc3VsdD4oc291Y2VzOiBPYnNlcnZhYmxlT3JQcm9taXNlPFRPdGhlcj5bXSwgcmVzdWx0U2VsZWN0b3I6IChmaXJzdFZhbHVlOiBULCAuLi5vdGhlclZhbHVlczogVE90aGVyW10pID0+IFRSZXN1bHQpOiBPYnNlcnZhYmxlPFRSZXN1bHQ+O1xuICAgIH1cbn1cblxuKGZ1bmN0aW9uKCkge1xuICAgIHZhciBvOiBSeC5PYnNlcnZhYmxlPGJvb2xlYW4+O1xuICAgIHZhciBpbzogUnguSU9ic2VydmFibGU8c3RyaW5nPjtcbiAgICB2YXIgc286IFJ4LlN1YmplY3Q8bnVtYmVyPjtcbiAgICB2YXIgcDogUnguUHJvbWlzZTx7IGE6IHN0cmluZyB9PjtcblxuICAgIHZhciByOiBSeC5PYnNlcnZhYmxlPHsgdm86IGJvb2xlYW4sIHZpbzogc3RyaW5nLCB2cDogeyBhOiBzdHJpbmcgfSwgdnNvOiBudW1iZXIgfT4gPSBvLndpdGhMYXRlc3RGcm9tKGlvLCBwLCBzbywgKHZvLCB2aW8sIHZwLCB2c28pID0+ICh7IHZvLCB2aW8sIHZwLCB2c28gfSkpO1xuXG4gICAgdmFyIHJyIDogUnguT2JzZXJ2YWJsZTxudW1iZXI+ID0gby53aXRoTGF0ZXN0RnJvbSg8YW55W10+W2lvLCBzbywgcF0sICh2MSwgaXRlbXMpID0+IDUpO1xufSk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
