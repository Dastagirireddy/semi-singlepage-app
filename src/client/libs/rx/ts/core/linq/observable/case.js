/// <reference path="../../observable.ts" />
/// <reference path="../../concurrency/scheduler.ts" />
(function () {
    var o;
    var p;
    var e;
    var on;
    var pn;
    var en;
    var so = {};
    so['abc'] = p;
    so['def'] = e;
    so['xyz'] = o;
    var no = {};
    no[1] = pn;
    no[2] = en;
    no[3] = on;
    o = Rx.Observable.case(function () { return 'abc'; }, so);
    o = Rx.Observable.case(function () { return 'abc'; }, so, e);
    o = Rx.Observable.case(function () { return 'abc'; }, so, Rx.Scheduler.async);
    on = Rx.Observable.case(function () { return 1; }, no);
    on = Rx.Observable.case(function () { return 2; }, no, en);
    on = Rx.Observable.case(function () { return 3; }, no, Rx.Scheduler.async);
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInB1YmxpYy9ub2RlX21vZHVsZXMvcngvdHMvY29yZS9saW5xL29ic2VydmFibGUvY2FzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxBQUVBLDRDQUY0QztBQUM1Qyx1REFBdUQ7QUF3QnZELENBQUM7SUFDRyxJQUFJLENBQXdCLENBQUM7SUFDN0IsSUFBSSxDQUFxQixDQUFDO0lBQzFCLElBQUksQ0FBd0IsQ0FBQztJQUM3QixJQUFJLEVBQXlCLENBQUM7SUFDOUIsSUFBSSxFQUFzQixDQUFDO0lBQzNCLElBQUksRUFBeUIsQ0FBQztJQUU5QixJQUFJLEVBQUUsR0FBd0QsRUFBRSxDQUFDO0lBQ2pFLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDZCxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVkLElBQUksRUFBRSxHQUF3RCxFQUFFLENBQUE7SUFDaEUsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUNYLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDWCxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBRVgsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLGNBQU0sT0FBQSxLQUFLLEVBQUwsQ0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFBO0lBQ3ZDLENBQUMsR0FBRyxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxjQUFNLE9BQUEsS0FBSyxFQUFMLENBQUssRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUE7SUFDMUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLGNBQU0sT0FBQSxLQUFLLEVBQUwsQ0FBSyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRTVELEVBQUUsR0FBRyxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxjQUFNLE9BQUEsQ0FBQyxFQUFELENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQTtJQUNwQyxFQUFFLEdBQUcsRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsY0FBTSxPQUFBLENBQUMsRUFBRCxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3pDLEVBQUUsR0FBRyxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxjQUFNLE9BQUEsQ0FBQyxFQUFELENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUM3RCxDQUFDLENBQUMsQ0FBQyIsImZpbGUiOiJwdWJsaWMvbm9kZV9tb2R1bGVzL3J4L3RzL2NvcmUvbGlucS9vYnNlcnZhYmxlL2Nhc2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vb2JzZXJ2YWJsZS50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vY29uY3VycmVuY3kvc2NoZWR1bGVyLnRzXCIgLz5cbm1vZHVsZSBSeCB7XG4gICAgZXhwb3J0IGludGVyZmFjZSBPYnNlcnZhYmxlU3RhdGljIHtcbiAgICAgICAgLyoqXG4gICAgICAgICogIFVzZXMgc2VsZWN0b3IgdG8gZGV0ZXJtaW5lIHdoaWNoIHNvdXJjZSBpbiBzb3VyY2VzIHRvIHVzZS5cbiAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZWxlY3RvciBUaGUgZnVuY3Rpb24gd2hpY2ggZXh0cmFjdHMgdGhlIHZhbHVlIGZvciB0byB0ZXN0IGluIGEgY2FzZSBzdGF0ZW1lbnQuXG4gICAgICAgICogQHBhcmFtIHtBcnJheX0gc291cmNlcyBBIG9iamVjdCB3aGljaCBoYXMga2V5cyB3aGljaCBjb3JyZXNwb25kIHRvIHRoZSBjYXNlIHN0YXRlbWVudCBsYWJlbHMuXG4gICAgICAgICogQHBhcmFtIHtPYnNlcnZhYmxlfSBbZWxzZVNvdXJjZV0gVGhlIG9ic2VydmFibGUgc2VxdWVuY2Ugb3IgUHJvbWlzZSB0aGF0IHdpbGwgYmUgcnVuIGlmIHRoZSBzb3VyY2VzIGFyZSBub3QgbWF0Y2hlZC4gSWYgdGhpcyBpcyBub3QgcHJvdmlkZWQsIGl0IGRlZmF1bHRzIHRvIFJ4Lk9ic2VydmFiZS5lbXB0eSB3aXRoIHRoZSBzcGVjaWZpZWQgc2NoZWR1bGVyLlxuICAgICAgICAqXG4gICAgICAgICogQHJldHVybnMge09ic2VydmFibGV9IEFuIG9ic2VydmFibGUgc2VxdWVuY2Ugd2hpY2ggaXMgZGV0ZXJtaW5lZCBieSBhIGNhc2Ugc3RhdGVtZW50LlxuICAgICAgICAqL1xuICAgICAgICBjYXNlPFQ+KHNlbGVjdG9yOiAoKSA9PiBzdHJpbmcsIHNvdXJjZXM6IHsgW2tleTogc3RyaW5nXTogT2JzZXJ2YWJsZU9yUHJvbWlzZTxUPjsgfSwgc2NoZWR1bGVyT3JFbHNlU291cmNlPzogSVNjaGVkdWxlciB8IE9ic2VydmFibGVPclByb21pc2U8VD4pOiBPYnNlcnZhYmxlPFQ+O1xuICAgICAgICAvKipcbiAgICAgICAgKiAgVXNlcyBzZWxlY3RvciB0byBkZXRlcm1pbmUgd2hpY2ggc291cmNlIGluIHNvdXJjZXMgdG8gdXNlLlxuICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHNlbGVjdG9yIFRoZSBmdW5jdGlvbiB3aGljaCBleHRyYWN0cyB0aGUgdmFsdWUgZm9yIHRvIHRlc3QgaW4gYSBjYXNlIHN0YXRlbWVudC5cbiAgICAgICAgKiBAcGFyYW0ge0FycmF5fSBzb3VyY2VzIEEgb2JqZWN0IHdoaWNoIGhhcyBrZXlzIHdoaWNoIGNvcnJlc3BvbmQgdG8gdGhlIGNhc2Ugc3RhdGVtZW50IGxhYmVscy5cbiAgICAgICAgKiBAcGFyYW0ge09ic2VydmFibGV9IFtlbHNlU291cmNlXSBUaGUgb2JzZXJ2YWJsZSBzZXF1ZW5jZSBvciBQcm9taXNlIHRoYXQgd2lsbCBiZSBydW4gaWYgdGhlIHNvdXJjZXMgYXJlIG5vdCBtYXRjaGVkLiBJZiB0aGlzIGlzIG5vdCBwcm92aWRlZCwgaXQgZGVmYXVsdHMgdG8gUnguT2JzZXJ2YWJlLmVtcHR5IHdpdGggdGhlIHNwZWNpZmllZCBzY2hlZHVsZXIuXG4gICAgICAgICpcbiAgICAgICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZX0gQW4gb2JzZXJ2YWJsZSBzZXF1ZW5jZSB3aGljaCBpcyBkZXRlcm1pbmVkIGJ5IGEgY2FzZSBzdGF0ZW1lbnQuXG4gICAgICAgICovXG4gICAgICAgIGNhc2U8VD4oc2VsZWN0b3I6ICgpID0+IG51bWJlciwgc291cmNlczogeyBba2V5OiBudW1iZXJdOiBPYnNlcnZhYmxlT3JQcm9taXNlPFQ+OyB9LCBzY2hlZHVsZXJPckVsc2VTb3VyY2U/OiBJU2NoZWR1bGVyIHwgT2JzZXJ2YWJsZU9yUHJvbWlzZTxUPik6IE9ic2VydmFibGU8VD47XG4gICAgfVxufVxuXG4oZnVuY3Rpb24oKSB7XG4gICAgdmFyIG86IFJ4Lk9ic2VydmFibGU8c3RyaW5nPjtcbiAgICB2YXIgcDogUnguUHJvbWlzZTxzdHJpbmc+O1xuICAgIHZhciBlOiBSeC5PYnNlcnZhYmxlPHN0cmluZz47XG4gICAgdmFyIG9uOiBSeC5PYnNlcnZhYmxlPG51bWJlcj47XG4gICAgdmFyIHBuOiBSeC5Qcm9taXNlPG51bWJlcj47XG4gICAgdmFyIGVuOiBSeC5PYnNlcnZhYmxlPG51bWJlcj47XG5cbiAgICB2YXIgc28gOiB7IFtrZXk6IHN0cmluZ106IFJ4Lk9ic2VydmFibGVPclByb21pc2U8c3RyaW5nPjsgfSA9IHt9O1xuICAgIHNvWydhYmMnXSA9IHA7XG4gICAgc29bJ2RlZiddID0gZTtcbiAgICBzb1sneHl6J10gPSBvO1xuXG4gICAgdmFyIG5vIDogeyBba2V5OiBudW1iZXJdOiBSeC5PYnNlcnZhYmxlT3JQcm9taXNlPG51bWJlcj47IH0gPSB7fVxuICAgIG5vWzFdID0gcG47XG4gICAgbm9bMl0gPSBlbjtcbiAgICBub1szXSA9IG9uO1xuXG4gICAgbyA9IFJ4Lk9ic2VydmFibGUuY2FzZSgoKSA9PiAnYWJjJywgc28pXG4gICAgbyA9IFJ4Lk9ic2VydmFibGUuY2FzZSgoKSA9PiAnYWJjJywgc28sIGUpXG4gICAgbyA9IFJ4Lk9ic2VydmFibGUuY2FzZSgoKSA9PiAnYWJjJywgc28sIFJ4LlNjaGVkdWxlci5hc3luYyk7XG5cbiAgICBvbiA9IFJ4Lk9ic2VydmFibGUuY2FzZSgoKSA9PiAxLCBubylcbiAgICBvbiA9IFJ4Lk9ic2VydmFibGUuY2FzZSgoKSA9PiAyLCBubywgZW4pO1xuICAgIG9uID0gUnguT2JzZXJ2YWJsZS5jYXNlKCgpID0+IDMsIG5vLCBSeC5TY2hlZHVsZXIuYXN5bmMpO1xufSk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
