/// <reference path="./subscription.ts" />
/// <reference path="./recorded.ts" />
var Rx;
(function (Rx) {
})(Rx || (Rx = {}));
(function () {
    var n = Rx.ReactiveTest.created;
    var n = Rx.ReactiveTest.subscribed;
    var n = Rx.ReactiveTest.disposed;
    var r = Rx.ReactiveTest.onNext(100, 'abc');
    var r = Rx.ReactiveTest.onNext(100, function (v) { return false; });
    var r = Rx.ReactiveTest.onError(100, new Error('abc'));
    var r = Rx.ReactiveTest.onError(100, function (v) { return true; });
    var r = Rx.ReactiveTest.onCompleted(100);
    var s = Rx.ReactiveTest.subscribe(100);
    var s = Rx.ReactiveTest.subscribe(100, 200);
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInB1YmxpYy9ub2RlX21vZHVsZXMvcngvdHMvY29yZS90ZXN0aW5nL3JlYWN0aXZldGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwwQ0FBMEM7QUFDMUMsc0NBQXNDO0FBRXRDLElBQU8sRUFBRSxDQXNFUjtBQXRFRCxXQUFPLEVBQUUsRUFBQyxDQUFDO0FBc0VYLENBQUMsRUF0RU0sQ0FxRUYsQ0FyRUksS0FBRixFQUFFLFFBc0VSO0FBRUQsQ0FBQztJQUNHLElBQUksQ0FBQyxHQUFZLEVBQUUsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDO0lBQ3pDLElBQUksQ0FBQyxHQUFZLEVBQUUsQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDO0lBQzVDLElBQUksQ0FBQyxHQUFZLEVBQUUsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDO0lBRTFDLElBQUksQ0FBQyxHQUFpQixFQUFFLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDekQsSUFBSSxDQUFDLEdBQWlCLEVBQUUsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxVQUFDLENBQU0sSUFBSyxPQUFBLEtBQUssRUFBTCxDQUFLLENBQUMsQ0FBQztJQUNyRSxJQUFJLENBQUMsR0FBaUIsRUFBRSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDckUsSUFBSSxDQUFDLEdBQWlCLEVBQUUsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxVQUFDLENBQU0sSUFBSyxPQUFBLElBQUksRUFBSixDQUFJLENBQUMsQ0FBQztJQUNyRSxJQUFJLENBQUMsR0FBaUIsRUFBRSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFdkQsSUFBSSxDQUFDLEdBQXFCLEVBQUUsQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3pELElBQUksQ0FBQyxHQUFxQixFQUFFLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDbEUsQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoicHVibGljL25vZGVfbW9kdWxlcy9yeC90cy9jb3JlL3Rlc3RpbmcvcmVhY3RpdmV0ZXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vc3Vic2NyaXB0aW9uLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL3JlY29yZGVkLnRzXCIgLz5cblxubW9kdWxlIFJ4IHtcbiAgICBleHBvcnQgdmFyIFJlYWN0aXZlVGVzdDoge1xuICAgICAgICAvKiogRGVmYXVsdCB2aXJ0dWFsIHRpbWUgdXNlZCBmb3IgY3JlYXRpb24gb2Ygb2JzZXJ2YWJsZSBzZXF1ZW5jZXMgaW4gdW5pdCB0ZXN0cy4gKi9cbiAgICAgICAgY3JlYXRlZDogbnVtYmVyO1xuICAgICAgICAvKiogRGVmYXVsdCB2aXJ0dWFsIHRpbWUgdXNlZCB0byBzdWJzY3JpYmUgdG8gb2JzZXJ2YWJsZSBzZXF1ZW5jZXMgaW4gdW5pdCB0ZXN0cy4gKi9cbiAgICAgICAgc3Vic2NyaWJlZDogbnVtYmVyO1xuICAgICAgICAvKiogRGVmYXVsdCB2aXJ0dWFsIHRpbWUgdXNlZCB0byBkaXNwb3NlIHN1YnNjcmlwdGlvbnMgaW4gdW5pdCB0ZXN0cy4gKi9cbiAgICAgICAgZGlzcG9zZWQ6IG51bWJlcjtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRmFjdG9yeSBtZXRob2QgZm9yIGFuIE9uTmV4dCBub3RpZmljYXRpb24gcmVjb3JkIGF0IGEgZ2l2ZW4gdGltZSB3aXRoIGEgZ2l2ZW4gdmFsdWUgb3IgYSBwcmVkaWNhdGUgZnVuY3Rpb24uXG4gICAgICAgICAqXG4gICAgICAgICAqIDEgLSBSZWFjdGl2ZVRlc3Qub25OZXh0KDIwMCwgNDIpO1xuICAgICAgICAgKiAyIC0gUmVhY3RpdmVUZXN0Lm9uTmV4dCgyMDAsIGZ1bmN0aW9uICh4KSB7IHJldHVybiB4Lmxlbmd0aCA9PSAyOyB9KTtcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHRpY2tzIFJlY29yZGVkIHZpcnR1YWwgdGltZSB0aGUgT25OZXh0IG5vdGlmaWNhdGlvbiBvY2N1cnMuXG4gICAgICAgICAqIEBwYXJhbSB2YWx1ZSBSZWNvcmRlZCB2YWx1ZSBzdG9yZWQgaW4gdGhlIE9uTmV4dCBub3RpZmljYXRpb24gb3IgYSBwcmVkaWNhdGUuXG4gICAgICAgICAqIEByZXR1cm4gUmVjb3JkZWQgT25OZXh0IG5vdGlmaWNhdGlvbi5cbiAgICAgICAgICovXG4gICAgICAgIG9uTmV4dCh0aWNrczogbnVtYmVyLCB2YWx1ZTogYW55KTogUmVjb3JkZWQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGYWN0b3J5IG1ldGhvZCBmb3IgYW4gT25OZXh0IG5vdGlmaWNhdGlvbiByZWNvcmQgYXQgYSBnaXZlbiB0aW1lIHdpdGggYSBnaXZlbiB2YWx1ZSBvciBhIHByZWRpY2F0ZSBmdW5jdGlvbi5cbiAgICAgICAgICpcbiAgICAgICAgICogMSAtIFJlYWN0aXZlVGVzdC5vbk5leHQoMjAwLCA0Mik7XG4gICAgICAgICAqIDIgLSBSZWFjdGl2ZVRlc3Qub25OZXh0KDIwMCwgZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHgubGVuZ3RoID09IDI7IH0pO1xuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gdGlja3MgUmVjb3JkZWQgdmlydHVhbCB0aW1lIHRoZSBPbk5leHQgbm90aWZpY2F0aW9uIG9jY3Vycy5cbiAgICAgICAgICogQHBhcmFtIHZhbHVlIFJlY29yZGVkIHZhbHVlIHN0b3JlZCBpbiB0aGUgT25OZXh0IG5vdGlmaWNhdGlvbiBvciBhIHByZWRpY2F0ZS5cbiAgICAgICAgICogQHJldHVybiBSZWNvcmRlZCBPbk5leHQgbm90aWZpY2F0aW9uLlxuICAgICAgICAgKi9cbiAgICAgICAgb25OZXh0KHRpY2tzOiBudW1iZXIsIHByZWRpY2F0ZTogKHZhbHVlOiBhbnkpID0+IGJvb2xlYW4pOiBSZWNvcmRlZDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZhY3RvcnkgbWV0aG9kIGZvciBhbiBPbkVycm9yIG5vdGlmaWNhdGlvbiByZWNvcmQgYXQgYSBnaXZlbiB0aW1lIHdpdGggYSBnaXZlbiBlcnJvci5cbiAgICAgICAgICpcbiAgICAgICAgICogMSAtIFJlYWN0aXZlVGVzdC5vbk5leHQoMjAwLCBuZXcgRXJyb3IoJ2Vycm9yJykpO1xuICAgICAgICAgKiAyIC0gUmVhY3RpdmVUZXN0Lm9uTmV4dCgyMDAsIGZ1bmN0aW9uIChlKSB7IHJldHVybiBlLm1lc3NhZ2UgPT09ICdlcnJvcic7IH0pO1xuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gdGlja3MgUmVjb3JkZWQgdmlydHVhbCB0aW1lIHRoZSBPbkVycm9yIG5vdGlmaWNhdGlvbiBvY2N1cnMuXG4gICAgICAgICAqIEBwYXJhbSBleGNlcHRpb24gUmVjb3JkZWQgZXhjZXB0aW9uIHN0b3JlZCBpbiB0aGUgT25FcnJvciBub3RpZmljYXRpb24uXG4gICAgICAgICAqIEByZXR1cm4gUmVjb3JkZWQgT25FcnJvciBub3RpZmljYXRpb24uXG4gICAgICAgICAqL1xuICAgICAgICBvbkVycm9yKHRpY2tzOiBudW1iZXIsIGV4Y2VwdGlvbjogYW55KTogUmVjb3JkZWQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGYWN0b3J5IG1ldGhvZCBmb3IgYW4gT25FcnJvciBub3RpZmljYXRpb24gcmVjb3JkIGF0IGEgZ2l2ZW4gdGltZSB3aXRoIGEgZ2l2ZW4gZXJyb3IuXG4gICAgICAgICAqXG4gICAgICAgICAqIDEgLSBSZWFjdGl2ZVRlc3Qub25OZXh0KDIwMCwgbmV3IEVycm9yKCdlcnJvcicpKTtcbiAgICAgICAgICogMiAtIFJlYWN0aXZlVGVzdC5vbk5leHQoMjAwLCBmdW5jdGlvbiAoZSkgeyByZXR1cm4gZS5tZXNzYWdlID09PSAnZXJyb3InOyB9KTtcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHRpY2tzIFJlY29yZGVkIHZpcnR1YWwgdGltZSB0aGUgT25FcnJvciBub3RpZmljYXRpb24gb2NjdXJzLlxuICAgICAgICAgKiBAcGFyYW0gZXhjZXB0aW9uIFJlY29yZGVkIGV4Y2VwdGlvbiBzdG9yZWQgaW4gdGhlIE9uRXJyb3Igbm90aWZpY2F0aW9uLlxuICAgICAgICAgKiBAcmV0dXJuIFJlY29yZGVkIE9uRXJyb3Igbm90aWZpY2F0aW9uLlxuICAgICAgICAgKi9cbiAgICAgICAgb25FcnJvcih0aWNrczogbnVtYmVyLCBwcmVkaWNhdGU6IChleGNlcHRpb246IGFueSkgPT4gYm9vbGVhbik6IFJlY29yZGVkO1xuICAgICAgICAvKipcbiAgICAgICAgICogRmFjdG9yeSBtZXRob2QgZm9yIGFuIE9uQ29tcGxldGVkIG5vdGlmaWNhdGlvbiByZWNvcmQgYXQgYSBnaXZlbiB0aW1lLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gdGlja3MgUmVjb3JkZWQgdmlydHVhbCB0aW1lIHRoZSBPbkNvbXBsZXRlZCBub3RpZmljYXRpb24gb2NjdXJzLlxuICAgICAgICAgKiBAcmV0dXJuIFJlY29yZGVkIE9uQ29tcGxldGVkIG5vdGlmaWNhdGlvbi5cbiAgICAgICAgICovXG4gICAgICAgIG9uQ29tcGxldGVkKHRpY2tzOiBudW1iZXIpOiBSZWNvcmRlZDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRmFjdG9yeSBtZXRob2QgZm9yIGEgc3Vic2NyaXB0aW9uIHJlY29yZCBiYXNlZCBvbiBhIGdpdmVuIHN1YnNjcmlwdGlvbiBhbmQgZGlzcG9zYWwgdGltZS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHN0YXJ0IFZpcnR1YWwgdGltZSBpbmRpY2F0aW5nIHdoZW4gdGhlIHN1YnNjcmlwdGlvbiB3YXMgY3JlYXRlZC5cbiAgICAgICAgICogQHBhcmFtIGVuZCBWaXJ0dWFsIHRpbWUgaW5kaWNhdGluZyB3aGVuIHRoZSBzdWJzY3JpcHRpb24gd2FzIGRpc3Bvc2VkLlxuICAgICAgICAgKiBAcmV0dXJuIFN1YnNjcmlwdGlvbiBvYmplY3QuXG4gICAgICAgICAqL1xuICAgICAgICBzdWJzY3JpYmUoc3Vic2NyaWJlQXQ6IG51bWJlciwgdW5zdWJzY3JpYmVBdD86IG51bWJlcik6IFN1YnNjcmlwdGlvbjtcbiAgICB9XG59XG5cbihmdW5jdGlvbigpIHtcbiAgICB2YXIgbiA6IG51bWJlciA9IFJ4LlJlYWN0aXZlVGVzdC5jcmVhdGVkO1xuICAgIHZhciBuIDogbnVtYmVyID0gUnguUmVhY3RpdmVUZXN0LnN1YnNjcmliZWQ7XG4gICAgdmFyIG4gOiBudW1iZXIgPSBSeC5SZWFjdGl2ZVRlc3QuZGlzcG9zZWQ7XG5cbiAgICB2YXIgciA6IFJ4LlJlY29yZGVkID0gUnguUmVhY3RpdmVUZXN0Lm9uTmV4dCgxMDAsICdhYmMnKTtcbiAgICB2YXIgciA6IFJ4LlJlY29yZGVkID0gUnguUmVhY3RpdmVUZXN0Lm9uTmV4dCgxMDAsICh2OiBhbnkpID0+IGZhbHNlKTtcbiAgICB2YXIgciA6IFJ4LlJlY29yZGVkID0gUnguUmVhY3RpdmVUZXN0Lm9uRXJyb3IoMTAwLCBuZXcgRXJyb3IoJ2FiYycpKTtcbiAgICB2YXIgciA6IFJ4LlJlY29yZGVkID0gUnguUmVhY3RpdmVUZXN0Lm9uRXJyb3IoMTAwLCAodjogYW55KSA9PiB0cnVlKTtcbiAgICB2YXIgciA6IFJ4LlJlY29yZGVkID0gUnguUmVhY3RpdmVUZXN0Lm9uQ29tcGxldGVkKDEwMCk7XG5cbiAgICB2YXIgcyA6IFJ4LlN1YnNjcmlwdGlvbiA9IFJ4LlJlYWN0aXZlVGVzdC5zdWJzY3JpYmUoMTAwKTtcbiAgICB2YXIgcyA6IFJ4LlN1YnNjcmlwdGlvbiA9IFJ4LlJlYWN0aXZlVGVzdC5zdWJzY3JpYmUoMTAwLCAyMDApO1xufSk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
