System.register(['angular2/src/facade/lang', 'angular2/src/facade/exceptions'], function(exports_1, context_1) {
    "use strict";
    var __moduleName = context_1 && context_1.id;
    var lang_1, exceptions_1;
    var ReflectionCapabilities;
    return {
        setters:[
            function (lang_1_1) {
                lang_1 = lang_1_1;
            },
            function (exceptions_1_1) {
                exceptions_1 = exceptions_1_1;
            }],
        execute: function() {
            ReflectionCapabilities = (function () {
                function ReflectionCapabilities(reflect) {
                    this._reflect = lang_1.isPresent(reflect) ? reflect : lang_1.global.Reflect;
                }
                ReflectionCapabilities.prototype.isReflectionEnabled = function () { return true; };
                ReflectionCapabilities.prototype.factory = function (t) {
                    switch (t.length) {
                        case 0:
                            return function () { return new t(); };
                        case 1:
                            return function (a1) { return new t(a1); };
                        case 2:
                            return function (a1, a2) { return new t(a1, a2); };
                        case 3:
                            return function (a1, a2, a3) { return new t(a1, a2, a3); };
                        case 4:
                            return function (a1, a2, a3, a4) { return new t(a1, a2, a3, a4); };
                        case 5:
                            return function (a1, a2, a3, a4, a5) { return new t(a1, a2, a3, a4, a5); };
                        case 6:
                            return function (a1, a2, a3, a4, a5, a6) {
                                return new t(a1, a2, a3, a4, a5, a6);
                            };
                        case 7:
                            return function (a1, a2, a3, a4, a5, a6, a7) {
                                return new t(a1, a2, a3, a4, a5, a6, a7);
                            };
                        case 8:
                            return function (a1, a2, a3, a4, a5, a6, a7, a8) {
                                return new t(a1, a2, a3, a4, a5, a6, a7, a8);
                            };
                        case 9:
                            return function (a1, a2, a3, a4, a5, a6, a7, a8, a9) {
                                return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9);
                            };
                        case 10:
                            return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10) {
                                return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
                            };
                        case 11:
                            return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11) {
                                return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
                            };
                        case 12:
                            return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12) {
                                return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                            };
                        case 13:
                            return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13) {
                                return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
                            };
                        case 14:
                            return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14) {
                                return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
                            };
                        case 15:
                            return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15) {
                                return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
                            };
                        case 16:
                            return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16) {
                                return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
                            };
                        case 17:
                            return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17) {
                                return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
                            };
                        case 18:
                            return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18) {
                                return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
                            };
                        case 19:
                            return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19) {
                                return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19);
                            };
                        case 20:
                            return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20) {
                                return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
                            };
                    }
                    ;
                    throw new Error("Cannot create a factory for '" + lang_1.stringify(t) + "' because its constructor has more than 20 arguments");
                };
                /** @internal */
                ReflectionCapabilities.prototype._zipTypesAndAnnotations = function (paramTypes, paramAnnotations) {
                    var result;
                    if (typeof paramTypes === 'undefined') {
                        result = new Array(paramAnnotations.length);
                    }
                    else {
                        result = new Array(paramTypes.length);
                    }
                    for (var i = 0; i < result.length; i++) {
                        // TS outputs Object for parameters without types, while Traceur omits
                        // the annotations. For now we preserve the Traceur behavior to aid
                        // migration, but this can be revisited.
                        if (typeof paramTypes === 'undefined') {
                            result[i] = [];
                        }
                        else if (paramTypes[i] != Object) {
                            result[i] = [paramTypes[i]];
                        }
                        else {
                            result[i] = [];
                        }
                        if (lang_1.isPresent(paramAnnotations) && lang_1.isPresent(paramAnnotations[i])) {
                            result[i] = result[i].concat(paramAnnotations[i]);
                        }
                    }
                    return result;
                };
                ReflectionCapabilities.prototype.parameters = function (typeOrFunc) {
                    // Prefer the direct API.
                    if (lang_1.isPresent(typeOrFunc.parameters)) {
                        return typeOrFunc.parameters;
                    }
                    if (lang_1.isPresent(this._reflect) && lang_1.isPresent(this._reflect.getMetadata)) {
                        var paramAnnotations = this._reflect.getMetadata('parameters', typeOrFunc);
                        var paramTypes = this._reflect.getMetadata('design:paramtypes', typeOrFunc);
                        if (lang_1.isPresent(paramTypes) || lang_1.isPresent(paramAnnotations)) {
                            return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
                        }
                    }
                    // The array has to be filled with `undefined` because holes would be skipped by `some`
                    var parameters = new Array(typeOrFunc.length);
                    parameters.fill(undefined);
                    return parameters;
                };
                ReflectionCapabilities.prototype.annotations = function (typeOrFunc) {
                    // Prefer the direct API.
                    if (lang_1.isPresent(typeOrFunc.annotations)) {
                        var annotations = typeOrFunc.annotations;
                        if (lang_1.isFunction(annotations) && annotations.annotations) {
                            annotations = annotations.annotations;
                        }
                        return annotations;
                    }
                    if (lang_1.isPresent(this._reflect) && lang_1.isPresent(this._reflect.getMetadata)) {
                        var annotations = this._reflect.getMetadata('annotations', typeOrFunc);
                        if (lang_1.isPresent(annotations))
                            return annotations;
                    }
                    return [];
                };
                ReflectionCapabilities.prototype.propMetadata = function (typeOrFunc) {
                    // Prefer the direct API.
                    if (lang_1.isPresent(typeOrFunc.propMetadata)) {
                        var propMetadata = typeOrFunc.propMetadata;
                        if (lang_1.isFunction(propMetadata) && propMetadata.propMetadata) {
                            propMetadata = propMetadata.propMetadata;
                        }
                        return propMetadata;
                    }
                    if (lang_1.isPresent(this._reflect) && lang_1.isPresent(this._reflect.getMetadata)) {
                        var propMetadata = this._reflect.getMetadata('propMetadata', typeOrFunc);
                        if (lang_1.isPresent(propMetadata))
                            return propMetadata;
                    }
                    return {};
                };
                ReflectionCapabilities.prototype.interfaces = function (type) {
                    throw new exceptions_1.BaseException("JavaScript does not support interfaces");
                };
                ReflectionCapabilities.prototype.getter = function (name) { return new Function('o', 'return o.' + name + ';'); };
                ReflectionCapabilities.prototype.setter = function (name) {
                    return new Function('o', 'v', 'return o.' + name + ' = v;');
                };
                ReflectionCapabilities.prototype.method = function (name) {
                    var functionBody = "if (!o." + name + ") throw new Error('\"" + name + "\" is undefined');\n        return o." + name + ".apply(o, args);";
                    return new Function('o', 'args', functionBody);
                };
                // There is not a concept of import uri in Js, but this is useful in developing Dart applications.
                ReflectionCapabilities.prototype.importUri = function (type) { return "./" + lang_1.stringify(type); };
                return ReflectionCapabilities;
            }());
            exports_1("ReflectionCapabilities", ReflectionCapabilities);
        }
    }
});

//# sourceMappingURL=data:application/json;base64,
